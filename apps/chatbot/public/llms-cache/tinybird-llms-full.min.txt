# Tinybird Documentation (FWD)
Generated on: 2025-03-21T17:15:14.474Z
URL: https://www.tinybird.co/docs/forward
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Get started with Tinybird Forward · Tinybird Docs"
theme-color: "#171612"
description: "Follow this step-by-step tutorial to get started with Tinybird Forward."
---
# Get started with Tinybird Forward [¶](https://www.tinybird.co/docs/forward#get-started-with-tinybird-forward)
Copy as MD Tinybird Forward gives you the tooling and infrastructure you need to ship analytics features in your application:
- An OLAP database
- An API gateway
- A real-time ingestion system
- An auth system
- Tooling to build, iterate, and deploy data projects
Follow these steps to install Tinybird on your machine and deploy your first data project. See [Core concepts](/docs/forward/get-started/concepts) for an overview of Tinybird Forward.
## Before you begin [¶](https://www.tinybird.co/docs/forward#before-you-begin)
To get started, you need the following:
- [  A free Tinybird account](https://cloud.tinybird.co/)
- A container runtime, like Docker or Orbstack
- Linux or macOS
## Quick start [¶](https://www.tinybird.co/docs/forward#quick-start)
1
### Install and authenticate [¶](https://www.tinybird.co/docs/forward#install-and-authenticate)
To install the Tinybird Forward CLI, run the following command:
curl https://tinybird.co | sh Then, authenticate with your Tinybird account using `tb login`:
# Opens a browser window so that you can authenticate
tb login In the browser, create a new workspace or select an existing one.
2
### Run Tinybird Local [¶](https://www.tinybird.co/docs/forward#run-tinybird-local)
After you've authenticated, run `tb local start` to start the Tinybird Local container.
# Start the container
tb local start See [Local container](/docs/forward/get-started/install-tinybird/local) for more information on the container.
3
### Create a project [¶](https://www.tinybird.co/docs/forward#create-a-project)
Pass an LLM prompt using the `--prompt` flag to generate a customized starter project. For example:
tb create --prompt "I am developing the insights page for my app. I am tracking their usage and \
want to show them a line chart and a widget with the total amount of actions they did with time \
range filters. It is a multitenant app, so organization id is a required param for all endpoints" The previous prompt creates a project with a structure like the following:
.
├── copies
├── datasources
│   └── user_actions.datasource
├── endpoints
│   ├── user_action_insights_line_chart.pipe
│   └── user_action_insights_widget.pipe
├── fixtures
├── materializations
├── sinks
└── tests To create a new project, you only need to create a folder, run `tb local start` and then run `tb login`.
4
### Generate test data [¶](https://www.tinybird.co/docs/forward#generate-test-data)
Generate some test data by running `tb mock` with the name of the data source you want to test. For example:
tb mock user_actions This creates fixture data in the `fixtures` directory that you can use to test your project.
5
### Build your project [¶](https://www.tinybird.co/docs/forward#build-your-project)
Run `tb dev` to build your project and watch for changes. Building your project ensures that your datafiles are valid and are ready for deployment.
tb dev When you finish developing, you can exit the `tb dev` session.
6
### Deploy to Tinybird Cloud [¶](https://www.tinybird.co/docs/forward#deploy-to-tinybird-cloud)
Deploying a project validates and pushes the data project to your local or cloud environment.
To deploy to Tinybird Cloud, create a deployment using the `--cloud` flag. This prepares all the resources in the cloud environment.
# Prepares all resources in Tinybird Cloud
tb --cloud deploy You can now access your new project in [Tinybird Cloud](https://cloud.tinybird.co/) . To view your deployment, go to **Deployments**.
You can also deploy to Tinybird Local by running `tb deploy` without the `--cloud` flag.
## Next steps [¶](https://www.tinybird.co/docs/forward#next-steps)
- Familiarize yourself with Tinybird concepts. See[  Core concepts](/docs/forward/get-started/concepts)  .
- Learn about datafiles, like .datasource and .pipe files. See[  Datafiles](/docs/forward/datafiles)  .
- Get data into Tinybird from a variety of sources. See[  Get data in](/docs/forward/get-data-in)  .
- Browse the Tinybird CLI commands reference. See[  Commands reference](/docs/forward/commands)  .
---
URL: https://www.tinybird.co/docs/forward/work-with-data
Content:
---
title: "Work with data (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Learn how to process and copy data in Tinybird."
---
# Work with data [¶](https://www.tinybird.co/docs/forward/work-with-data#work-with-data)
Copy as MD When your data is in Tinybird, you can process it and explore it in different ways.
## Process and copy data [¶](https://www.tinybird.co/docs/forward/work-with-data#process-and-copy-data)
Tinybird provides several ways to process and copy data between data sources:
- **  Pipes**   are a way to query and transform data. You can read data from a data source, apply transformations, and use the result from another pipe, like an endpoint. Pipes can be specialized into endpoints, materialized views, copy pipes, and so on.
- **  Copy pipes**   capture the result of a pipe at a specific point in time and write it to a target data source. They can run on a schedule or run on demand, making them ideal for event-sourced snapshots, data experimentation, and deduplication with snapshots.
- **  Materialized views**   continuously re-evaluate a query as new events are inserted, maintaining an always up-to-date derived dataset. Unlike copy pipes which create point-in-time snapshots, materialized views provide real-time transformations of your data.
Each approach has its own strengths and use cases:
- Use pipes when you need to query and transform data.
- Use copy pipes when you need scheduled or on-demand snapshots of your data.
- Use materialized views when you need continuous, real-time transformations.
## Lineage [¶](https://www.tinybird.co/docs/forward/work-with-data#lineage)
Lineage visualizes how your data sources, endpoints, materialized views, and pipes connect and relate to each other.
You can select an item to see its details in the side panel.
## Playgrounds [¶](https://www.tinybird.co/docs/forward/work-with-data#playgrounds)
Playgrounds are sandbox environments where you can test your queries using ingested data. For example, you can use playgrounds to quickly query real-time production data, debug existing queries, or prototype new pipes.
You can download any playground by selecting **Download** . You can then add the .pipe file to your project.
## Next steps [¶](https://www.tinybird.co/docs/forward/work-with-data#next-steps)
- Learn about[  Pipes](/docs/forward/work-with-data/pipes)  .
- Learn about[  Copy pipes](/docs/forward/work-with-data/copy-pipes)  .
- Learn about[  Materialized views](/docs/forward/work-with-data/materialized-views)  .
---
URL: https://www.tinybird.co/docs/forward/test-and-deploy
Content:
---
title: "Test and deploy · Tinybird Docs"
theme-color: "#171612"
description: "Test and deploy your Tinybird Forward project. Make changes and deploy to Tinybird Cloud."
---
# Test and deploy your project [¶](https://www.tinybird.co/docs/forward/test-and-deploy#test-and-deploy-your-project)
Copy as MD After you've created your project, you can iterate on it, test it locally, and deploy it to Tinybird Cloud.
Tinybird Forward makes it easy to iterate, test, and deploy your data project like any other software project.
## Development lifecycle [¶](https://www.tinybird.co/docs/forward/test-and-deploy#development-lifecycle)
The following steps describe the typical development lifecycle.
1
### Develop locally [¶](https://www.tinybird.co/docs/forward/test-and-deploy#develop-locally)
Create the project using the Tinybird CLI. See [tb create](/docs/forward/commands/tb-create).
Start a dev session to build your project and watch for changes as you edit the [datafiles](/docs/forward/datafiles) . See [tb dev](/docs/forward/commands/tb-dev) . For example, you might need to optimize an endpoint, add a new endpoint, or change the data type of a column.
If you make schema changes that are incompatible with the previous version, you must use a [forward query](/docs/forward/test-and-deploy/evolve-data-source#forward-query) in your .datasource file. Otherwise, your deployment will fail due to a schema mismatch. See [Evolve data sources](/docs/forward/test-and-deploy/evolve-data-source).
2
### Validate and test [¶](https://www.tinybird.co/docs/forward/test-and-deploy#validate-and-test)
With a set of datafiles, you need to test your project to ensure it behaves as expected.
There are several ways to validate and test your changes. See [Test your project](/docs/forward/test-and-deploy/test-your-project).
3
### Stage your changes [¶](https://www.tinybird.co/docs/forward/test-and-deploy#stage-your-changes)
After you've built and tested your project, you can create a staging deployment locally or in Tinybird Cloud. See [Deployments](/docs/forward/test-and-deploy/deployments).
You can run commands against the staging deployment using the `--staging` flag.
4
### Promote your changes [¶](https://www.tinybird.co/docs/forward/test-and-deploy#promote-your-changes)
After successfully creating your staging deployment, promote it to live to make the changes available to your users. See [tb deployment promote](/docs/forward/commands/tb-deployment#tb-deployment-promote).
Tinybird only supports one live and one staging deployment per workspace.
## Next steps [¶](https://www.tinybird.co/docs/forward/test-and-deploy#next-steps)
- Make changes to your data sources and test them. See[  Evolve data sources](/docs/forward/test-and-deploy/evolve-data-source)  .
- Test your project locally. See[  Test your project](/docs/forward/test-and-deploy/test-your-project)  .
- Learn more about[  deployments](/docs/forward/test-and-deploy/deployments)  .
- Learn about datafiles, like .datasource and .pipe files. See[  Datafiles](/docs/forward/datafiles)  .
---
URL: https://www.tinybird.co/docs/forward/publish-your-data
Content:
---
title: "Publish your data (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Learn how to publish your data from Tinybird Forward."
---
# Publish your data [¶](https://www.tinybird.co/docs/forward/publish-your-data#publish-your-data)
Copy as MD You brought data into Tinybird, explored it, and processed it. Now you can publish it so that your application can use it.
1
## Create your endpoint [¶](https://www.tinybird.co/docs/forward/publish-your-data#create-your-endpoint)
You define an endpoint using a specific file type: .pipe files. See [.pipe](/docs/cli/datafiles/pipe-files).
Check that the endpoint is correct by running `tb build` . See [tb build](/docs/forward/commands/tb-build).
2
## Deploy the project [¶](https://www.tinybird.co/docs/forward/publish-your-data#deploy-the-project)
Deploy your project to activate your endpoint. See [Deploy your project using the CLI](/docs/forward/test-and-deploy/deployments/cli).
3
## Use your endpoint [¶](https://www.tinybird.co/docs/forward/publish-your-data#use-your-endpoint)
You can use your endpoint in your application by calling it with an HTTP GET request. See [Endpoints](/docs/forward/publish-your-data/api-endpoints).
4
## Add query parameters [¶](https://www.tinybird.co/docs/forward/publish-your-data#add-query-parameters)
You can add query parameters to your endpoint to filter the data that you want to query. See [Query parameters](/docs/forward/publish-your-data/api-endpoints#query-parameters).
---
URL: https://www.tinybird.co/docs/forward/get-data-in
Content:
---
title: "Get data into Tinybird Forward · Tinybird Docs"
theme-color: "#171612"
description: "Learn how to get data into Tinybird Forward."
---
# Get data into Tinybird Forward [¶](https://www.tinybird.co/docs/forward/get-data-in#get-data-into-tinybird-forward)
Copy as MD You can bring your data into Tinybird from a variety of sources:
- Events in NDJSON and JSON format. See[  Events API](/docs/forward/get-data-in/events-api)  .
- Data from local or remote files. See[  Ingest data from files](/docs/forward/get-data-in/local-file)  .
- Data from Kafka. See[  Ingest data from Kafka](/docs/forward/get-data-in/connectors/kafka)  .
- Data from S3 buckets. See[  Ingest data from S3](/docs/forward/get-data-in/connectors/s3)  .
---
URL: https://www.tinybird.co/docs/forward/datafiles
Content:
---
title: "Datafiles (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Datafiles describe your Tinybird Forward resources, like data sources, pipes, and so on. They're the source code of your project."
---
# Datafiles [¶](https://www.tinybird.co/docs/forward/datafiles#datafiles)
Copy as MD Datafiles describe your Tinybird resources, like data sources, pipes, and so on. They're the source code of your project.
You can use datafiles to manage your projects as source code and take advantage of version control. Tinybird CLI helps you produce and push datafiles to the Tinybird platform.
## Data projects [¶](https://www.tinybird.co/docs/forward/datafiles#data-projects)
A data project is a collection of datafiles that describe your Tinybird resources.
The minimal data project includes:
- A .datasource file, which describes the source and schema of your data.
- A pipe, typically a .endpoint file, which describes how to process and serve the data.
For example:
- Data source
- Pipe
SCHEMA >
`day` Date `json:$.day`,
`station` String `json:$.station`,
`abslevel` Nullable(Float32) `json:$.abslevel`,
`percentagevolume` Float32 `json:$.percentagevolume`,
`volume` Float32 `json:$.volume`
ENGINE "MergeTree"
ENGINE_PARTITION_KEY "station"
ENGINE_SORTING_KEY "day, station"
## Folder structure [¶](https://www.tinybird.co/docs/forward/datafiles#folder-structure)
Tinybird projects are organized in a folder structure that helps you organize the source for each resource type.
The datafiles that you generate when you run `tb create` are organized in the following folders:
- `connections`   : Contains[  connection files](/docs/forward/datafiles/connection-files)  .
- `copies`   : Contains the[  copy pipes](/docs/forward/datafiles/pipe-files#copy-pipes)  .
- `datasources`   : Contains the[  data sources](/docs/forward/datafiles/datasource-files)  .
- `endpoints`   : Contains the[  endpoint pipes](/docs/forward/datafiles/pipe-files#endpoint-pipes)  .
- `fixtures`   : Contains test fixtures and test data.
- `infra`   : Contains the infrastructure files. See[  tb infra](/docs/forward/commands/tb-infra)  .
- `materializations`   : Contains[  materialized views](/docs/forward/datafiles/pipe-files#materialized-pipes)  .
- `pipes`   : Contains non-published[  pipes](/docs/forward/datafiles/pipe-files)  .
- `sinks`   : Contains[  sinks](/docs/forward/datafiles/pipe-files#sink-pipes)  .
- `tests`   : Contains the test suites.
The following example shows a typical `tinybird` project folder structure that includes subfolders for supported types:
##### Example file structure
.
├── .tinyb
├── connections
├── copies
├── datasources
│   └── user_actions.datasource
├── endpoints
│   ├── user_actions_line_chart.pipe
│   └── user_actions_total_widget.pipe
├── fixtures
│   ├── user_actions.prompt
│   └── user_actions_d1046873.ndjson
├── infra
│   └── aws
│       ├── config.json
│       ├── k8s.yaml
│       └── main.tf
├── materializations
├── pipes
├── sinks
└── tests
└── user_actions_line_chart.yaml The .tinyb file contains the Tinybird project configuration, including the authentication token obtained by running `tb login` . See [.tinyb file](/docs/forward/datafiles/tinyb-file).
## Types of datafiles [¶](https://www.tinybird.co/docs/forward/datafiles#types-of-datafiles)
Tinybird uses the following types of datafiles:
- Datasource files (.datasource) represent data sources. See[  Datasource files](/docs/cli/datafiles/datasource-files)  .
- Pipe files (.pipe) represent pipes of various types. See[  Pipe files](/docs/cli/datafiles/pipe-files)  .
## Syntactic conventions [¶](https://www.tinybird.co/docs/forward/datafiles#syntactic-conventions)
Datafiles follow the same syntactic conventions.
### Casing [¶](https://www.tinybird.co/docs/forward/datafiles#casing)
Instructions always appear at the beginning of a line in upper case. For example:
##### Basic syntax
COMMAND value
ANOTHER_INSTR "Value with multiple words"
### Multiple lines [¶](https://www.tinybird.co/docs/forward/datafiles#multiple-lines)
Instructions can span multiples lines. For example:
##### Multiline syntax
SCHEMA >
`d` DateTime,
`total` Int32,
`from_novoa` Int16
### Comments [¶](https://www.tinybird.co/docs/forward/datafiles#comments)
You can add comments using the `#` character. For example:
# This is a comment
COMMAND value
## Next steps [¶](https://www.tinybird.co/docs/forward/datafiles#next-steps)
- Learn about[  datasource files](/docs/forward/datafiles/datasource-files)  .
- Learn about[  connection files](/docs/forward/datafiles/connection-files)  .
- Learn about[  pipe files](/docs/forward/datafiles/pipe-files)  .
---
URL: https://www.tinybird.co/docs/forward/commands
Content:
---
title: "Tinybird Forward CLI command reference · Tinybird Docs"
theme-color: "#171612"
description: "The Tinybird Forward CLI allows you to use all the Tinybird functionality directly from the command line. Get to know the command reference."
---
# CLI command reference [¶](https://www.tinybird.co/docs/forward/commands#cli-command-reference)
Copy as MD The following list shows all available commands in the Tinybird Forward command-line interface, their options, and their arguments.
- [  Global options](/docs/forward/commands/global-options)
- [  tb auth](/docs/forward/commands/tb-auth)
- [  tb build](/docs/forward/commands/tb-build)
- [  tb connection](/docs/forward/commands/tb-connection)
- [  tb copy](/docs/forward/commands/tb-copy)
- [  tb create](/docs/forward/commands/tb-create)
- [  tb datasource](/docs/forward/commands/tb-datasource)
- [  tb deploy](/docs/forward/commands/tb-deploy)
- [  tb deployment](/docs/forward/commands/tb-deployment)
- [  tb dev](/docs/forward/commands/tb-dev)
- [  tb diff](/docs/forward/commands/tb-diff)
- [  tb endpoint](/docs/forward/commands/tb-endpoint)
- [  tb infra](/docs/forward/commands/tb-infra)
- [  tb job](/docs/forward/commands/tb-job)
- [  tb local](/docs/forward/commands/tb-local)
- [  tb login](/docs/forward/commands/tb-login)
- [  tb logout](/docs/forward/commands/tb-logout)
- [  tb materialization](/docs/forward/commands/tb-materialization)
- [  tb mock](/docs/forward/commands/tb-mock)
- [  tb open](/docs/forward/commands/tb-open)
- [  tb pipe](/docs/forward/commands/tb-pipe)
- [  tb secret](/docs/forward/commands/tb-secret)
- [  tb sql](/docs/forward/commands/tb-sql)
- [  tb test](/docs/forward/commands/tb-test)
- [  tb token](/docs/forward/commands/tb-token)
- [  tb update](/docs/forward/commands/tb-update)
- [  tb workspace](/docs/forward/commands/tb-workspace)
- [  Template functions](/docs/forward/commands/template-functions)
---
URL: https://www.tinybird.co/docs/forward/work-with-data/pipes
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Pipes (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Pipes help you to bring your SQL queries together to achieve a purpose, like publishing an endpoint."
---
# Pipes [¶](https://www.tinybird.co/docs/forward/work-with-data/pipes#pipes)
Copy as MD A pipe is a collection of one or more SQL queries. Each query is called a node.
Use Pipes to build features over your data. For example, you can write SQL that joins, aggregates, or otherwise transforms your data and publish the result as an endpoint.
## Nodes [¶](https://www.tinybird.co/docs/forward/work-with-data/pipes#nodes)
A node is a container for a single SQL `SELECT` statement. Nodes live within pipes, and you can have many sequential nodes inside the same pipe. They allow you to break your query logic down into multiple smaller queries. You can then chain nodes together to build the logic incrementally.
A query in a node can read data from a data source, other nodes inside the same pipe, or from endpoint nodes in other pipes. Each node can be developed and tested individually. This makes it much easier to build complex query logic in Tinybird as you avoid creating large monolithic queries with many subqueries.
## Create generic pipes [¶](https://www.tinybird.co/docs/forward/work-with-data/pipes#create-generic-pipes)
Pipes are defined in a .pipe file without a specific `TYPE` . See [Pipe files](/docs/forward/datafiles/pipe-files).
## List your pipes [¶](https://www.tinybird.co/docs/forward/work-with-data/pipes#list-your-pipes)
To list your pipes, run the following command:
tb pipe ls
## Next steps [¶](https://www.tinybird.co/docs/forward/work-with-data/pipes#next-steps)
- Learn about[  Endpoints](/docs/forward/publish-your-data/api-endpoints)  .
- Learn about[  Copy pipes](/docs/forward/work-with-data/copy-pipes)  .
- Learn about[  Materialized views](/docs/forward/work-with-data/materialized-views)  .
---
URL: https://www.tinybird.co/docs/forward/work-with-data/materialized-views
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Materialized views (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Materialized views process your data at ingest time to increase the performance of your queries and endpoints."
---
# Materialized views [¶](https://www.tinybird.co/docs/forward/work-with-data/materialized-views#materialized-views)
Copy as MD A materialized view is the continuous, streaming result of a pipe saved as a new data source. As new data is ingested into the origin data source, the transformed results from the pipe are continually inserted in the new materialized view, which you can query as any other data source.
Preprocessing data at ingest time reduces latency and cost-per-query, and can significantly improve the performance of your endpoints. For example, you can transform the data through SQL queries, using calculations such as counts, sums, averages, or arrays, or transformations like string manipulations or joins. The resulting materialized view acts as a data source you can query or publish.
Typical use cases of Materialized views include:
- Aggregating, sorting, or filtering data at ingest time.
- Improving the speed of a query that's taking too much time to run.
- Simplifying query development by automating common filters and aggregations.
- Reducing the amount of data processed by a single query.
- Changing an existing schema for a different use case.
You can create a new materialized view and populate it with all existing data without any cost.
## Create materialized views [¶](https://www.tinybird.co/docs/forward/work-with-data/materialized-views#create-materialized-views)
Materialized views are defined in a .pipe file using the `TYPE MATERIALIZED` directive. See [Materialized pipes](/docs/forward/datafiles/pipe-files#materialized-pipes).
Consider an `origin` data source, for example `my_origin.datasource` , like the following:
##### Origin data source
SCHEMA >
`id` Int16,
`local_date` Date,
`name` String,
`count` Int64 You might want to create an optimized version of the data source that preaggregates `count` for each ID. To do this, create a new data source that uses a `SimpleAggregateFunction` as a materialized view.
First, define the `destination` data source, for example `my_destination.datasource`:
##### Destination data source
SCHEMA >
`id` Int16,
`local_date` Date,
`name` String,
`total_count` SimpleAggregateFunction(sum, UInt64)
ENGINE "AggregatingMergeTree"
ENGINE_PARTITION_KEY "toYYYYMM(local_date)"
ENGINE_SORTING_KEY "local_date,id" Write a materialized pipe, for example `my_transformation.pipe`:
##### Transformation Pipe
NODE transformation_node
SQL >
SELECT
id,
local_date,
name,
sum(count) as total_count
FROM
my_origin
GROUP BY
id,
local_date,
name
TYPE materialized
DATASOURCE my_destination Once you have the origin and destination data sources defined and the materialized pipe, deploy the project to apply the changes. Materialized views are populated automatically in the target environment.
## Populate materialized views on demand [¶](https://www.tinybird.co/docs/forward/work-with-data/materialized-views#populate-materialized-views-on-demand)
You can populate a materialized view on demand using the `tb materialization populate` command. For example:
##### Populate the materialized view
tb materialization populate my_transformation.pipe You can also truncate the materialized view before populating it. For example:
##### Truncate the materialized view
tb materialization populate my_transformation.pipe --truncate See [tb materialization populate](/docs/forward/commands/tb-materialization#tb-materialization-populate) for more details.
## Next steps [¶](https://www.tinybird.co/docs/forward/work-with-data/materialized-views#next-steps)
- Learn about[  Copy pipes](/docs/forward/work-with-data/copy-pipes)  .
- Publish your data with[  API endpoints](/docs/forward/publish-your-data)  .
---
URL: https://www.tinybird.co/docs/forward/work-with-data/copy-pipes
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Copy pipes (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Copy pipes capture the result of a pipe at a moment in time and write the result into a target data source. They can be run on a schedule, or executed on demand."
---
# Copy pipes [¶](https://www.tinybird.co/docs/forward/work-with-data/copy-pipes#copy-pipes)
Copy as MD Copy pipes capture the result of a pipe at a moment in time and write the result into a target data source. They can be run on a schedule, or executed on demand.
Use copy pipes for:
- Event-sourced snapshots, such as change data capture (CDC).
- Copy data from Tinybird to another location in Tinybird to experiment.
- De-duplicate with snapshots.
Copy pipes should not be confused with [materialized views](/docs/forward/work-with-data/materialized-views) . While materialized views continuously update as new events are inserted, copy pipes generate a single snapshot at a specific point in time.
## Create a copy pipe [¶](https://www.tinybird.co/docs/forward/work-with-data/copy-pipes#create-a-copy-pipe)
Copy pipes are defined in a .pipe file, including defining nodes that contain your SQL queries. See [.pipe files](/docs/forward/datafiles/pipe-files) for more information.
In the .pipe file you define the queries that filter and transform the data as needed. The final result of all queries is the result that you want to write into a data source.
The file must contain a `TYPE COPY` node that defines which node contains the final result. To do this, include the following parameters at the end of a node:
TYPE COPY
TARGET_DATASOURCE datasource_name
COPY_SCHEDULE --(optional) a cron expression or @on-demand. If not defined, it would default to @on-demand.
COPY_MODE append --(Optional) The strategy to ingest data for copy jobs. One of `append` or `replace`, if empty the default strategy is `append`. There can be only one copy node per pipe, and no other outputs, such as [materialized views](/docs/forward/work-with-data/materialized-views) or [API endpoints](/docs/forward/publish-your-data/api-endpoints).
## Schedule a copy pipe [¶](https://www.tinybird.co/docs/forward/work-with-data/copy-pipes#schedule-a-copy-pipe)
You can schedule copy pipes to run at a specific time using a cron expression. To schedule a copy pipe, configure `COPY_SCHEDULE` with a cron expression. On-demand copy pipes are defined by configuring `COPY_SCHEDULE` with the value `@on-demand`.
Here is an example of a copy pipe scheduled to run every hour and that writes the results of a query into the `sales_hour_copy` data source:
NODE daily_sales
SQL >
%
SELECT toStartOfDay(starting_date) day, country, sum(sales) as total_sales
FROM teams
WHERE
day BETWEEN toStartOfDay({{DateTime(job_timestamp)}}) - interval 1 day AND toStartOfDay({{DateTime(job_timestamp)}})
and country = {{ String(country, 'US')}}
GROUP BY day, country
TYPE COPY
TARGET_DATASOURCE sales_hour_copy
COPY_SCHEDULE 0 * * * * Before pushing the copy pipe to your workspace, make sure that the target data source already exists and has a schema that matches the output of the query result.
All schedules are executed in the UTC time zone. If you are configuring a schedule that runs at a specific time, be careful to consider that you will need to convert the desired time from your local time zone to UTC.
## List your copy pipes [¶](https://www.tinybird.co/docs/forward/work-with-data/copy-pipes#list-your-copy-pipes)
Use the `tb copy ls` command to list all your copy pipes. See [tb copy](/docs/forward/commands/tb-copy).
## Run, pause, or resume a copy pipe [¶](https://www.tinybird.co/docs/forward/work-with-data/copy-pipes#run-pause-or-resume-a-copy-pipe)
Use the `tb copy` command to run, pause, or resume a copy pipe. See [tb copy](/docs/forward/commands/tb-copy).
You can run `tb job ls` to see any running jobs, as well as any jobs that have finished during the last 48 hours.
## Next steps [¶](https://www.tinybird.co/docs/forward/work-with-data/copy-pipes#next-steps)
- Learn about[  Materialized views](/docs/forward/work-with-data/materialized-views)  .
- Publish your data with[  API endpoints](/docs/forward/publish-your-data)  .
---
URL: https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project
Last update: 2025-03-20T16:14:51.000Z
Content:
---
title: "Configure local testing · Tinybird Docs"
theme-color: "#171612"
description: "Set up fixtures and test suites for your Tinybird project."
---
# Configure local testing [¶](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#configure-local-testing)
Copy as MD Testing your data project locally ensures that your resources are working as expected before you deploy your project to Tinybird.
There are several ways of generating test data for your local project. You can:
- Check the deployment before creating it. See[  Check deployment](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#check-deployment)  .
- Create fixtures and store them with your datafiles. See[  Fixture files](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#fixture-files)  .
- Generate mock data using the `tb mock`   command. See[  Generate mock data](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#generate-mock-data)  .
- Use Tinybird's ingest APIs to send events or files. See[  Call the ingest APIs](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#call-the-ingest-apis)  .
- Generate test suites using the `tb test`   command. See[  Create a test suite](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#create-a-test-suite)  .
## Check deployment [¶](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#check-deployment)
After you finish developing your project, run `tb deploy --check` to validate the deployment before creating it. This is a good way of catching potential breaking changes. See [tb deploy](/docs/forward/commands/tb-deploy) for more information.
tb deploy --check
Running against Tinybird Local
» Validating deployment...
» Changes to be deployed...
-----------------------------------------------------------------
| status   | name         | path                                |
-----------------------------------------------------------------
| modified | user_actions | datasources/user_actions.datasource |
-----------------------------------------------------------------
✓ Deployment is valid
## Fixture files [¶](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#fixture-files)
Fixtures are NDJSON files that contain sample data for your project. Fixtures are stored inside the `fixtures` folder in your project.
my-app/
├─ datasources/
│  ├─ user_actions.datasource
│  └─ ...
├─ fixtures/
│  ├─ user_actions.ndjson
│  └─ ... Every time you run `tb build` , the CLI checks for fixture files and includes them in the build. Fixture files must have the same name as the associated .datasource file.
## Generate mock data [¶](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#generate-mock-data)
The `tb mock` command creates fixtures based on your data sources. See [tb mock](/docs/forward/commands/tb-mock) for more information.
For example, the following command creates a fixture for the `user_actions` data source.
tb mock user_actions
» Creating fixture for user_actions...
✓ /fixtures/user_actions.ndjson created
... You can use the `--prompt` flag to add more context to the data that is generated. For example:
tb mock user_actions --prompt "Create mock data for 23 users from the US"`
## Call the ingest APIs [¶](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#call-the-ingest-apis)
Another way of testing your project is to call the local ingest APIs:
- Send events to the local[  Events API](/docs/api-reference/events-api)   using a generator.
- Ingest data from files using the[  Data sources API](/docs/api-reference/datasource-api)  .
Obtain a token using `tb token ls` and call the local endpoint:
- cURL (Events API)
- Local file (Data sources API)
- Remote file (Data sources API)
curl \
-X POST 'http://localhost:7181/v0/events?name=<your_datasource>' \
-H "Authorization: Bearer <your_token>" \
-d $'<your_data>' As you call the APIs, you can see errors and warnings in the console. Use this information to debug your datafiles.
## Create a test suite [¶](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#create-a-test-suite)
Once your project builds correctly, you can generate a test suite using [tb test](/docs/forward/commands/tb-test).
For example, the following command creates a test suite for the `user_action_insights_widget` pipe.
# Pass a pipe name to create a test
tb test create user_action_insights_widget Then, customize the tests to fit your needs.
You can use the `--prompt` flag to add more context to the data that is generated. For example:
tb test create user_action_insights_widget --prompt "return user actions filtering by CLICKED" The output of the command is a test suite file that you can find in the `tests` folder of your project.
- name: user_action_insights_widget_clicked
description: Test the endpoint that returns user actions filtering by CLICKED
parameters: action=CLICKED
expected_result: |
{"action":"CLICKED", "user_id":1, "timestamp":"2025-03-19T01:58:31Z"}
{"action":"CLICKED", "user_id":2, "timestamp":"2025-03-20T05:34:22Z"}
{"action":"CLICKED", "user_id":3, "timestamp":"2025-03-21T19:21:34Z"} When creating tests, follow these guidelines:
- Give each test a meaningful name and description that explains its purpose.
- Define query parameters without quotes.
- The `expected_result`   should match the data object from your endpoint's response.
- An empty string ( `''`   ) in the `expected_result`   means the endpoint returns no data. If an empty result is unexpected, verify your endpoint's output and update the test by running:
tb test update user_action_insights_widget Once you have your test suite, you can run it using the `tb test run` command.
tb test run
» Running tests
* user_action_insights_widget_clicked.yaml
✓ user_action_insights_widget_clicked passed
✓ 1/1 passed
## Next steps [¶](https://www.tinybird.co/docs/forward/test-and-deploy/test-your-project#next-steps)
- Make changes to your data sources and test them. See[  Evolve data sources](/docs/forward/test-and-deploy/evolve-data-source)  .
- Learn more about[  environments](/docs/forward/get-started/environments)  .
- Learn more about[  deployments](/docs/forward/test-and-deploy/deployments)  .
- Learn about datafiles, like .datasource and .pipe files. See[  Datafiles](/docs/forward/datafiles)  .
---
URL: https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Evolve data sources · Tinybird Docs"
theme-color: "#171612"
description: "Evolve your data sources in Tinybird Forward."
---
# Evolve data sources [¶](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#evolve-data-sources)
Copy as MD After you've deployed your project, you can evolve your data sources. For example, you might need to add a new column, change the data type of a column, or change the sorting key. Tinybird Forward handles the data migration.
## Types of changes [¶](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#types-of-changes)
You can evolve your data sources by editing one or more of the following:
- Landing data source schema.
- Landing data source engine settings.
- Materialized data source.
## Landing data source schema [¶](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#landing-data-source-schema)
When you make changes to the schema of a landing data source, such as adding or editing columns or changing a data type, you can follow these steps:
1. In Tinybird Local, start a dev session with `tb dev`  .
2. Edit the .datasource file to add the changes. See[  SCHEMA instructions](/docs/forward/datafiles/datasource-files#schema)  .
3. Add a[  forward query](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#forward-query)   instruction to tell Tinybird how to migrate your data.
4. Run `tb deploy --check`   to validate the deployment before creating it. This is a good way of catching potential breaking changes.
5. Deploy and promote your changes in Tinybird Cloud using `tb --cloud deploy`  .
When Tinybird Cloud creates the deployment, it automatically populates the new table following the updated schema.
If a deployment fails, Tinybird automatically discards the staging deployment and maintains the live version.
### Forward query [¶](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#forward-query)
If you make changes to a .datasource file that are incompatible with the live version, you must use a forward query to transform the data from the live schema to the new one. Otherwise, your deployment fails due to a schema mismatch.
The `FORWARD_QUERY` instruction is a `SELECT` query executed on the live data source. The query must include the column selection part of the query, for example `SELECT a, b, c` or `SELECT * except 'guid', toUUID(guid) AS guid` . The `FROM` and `WHERE` clauses aren't supported.
The following is an example of a forward query that changes the `session_id` column from a `String` to a `UUID` type:
##### tinybird/datasources/forward-query.datasource - Data Source with a FORWARD_QUERY declaration
DESCRIPTION >
Analytics events landing data source
SCHEMA >
`timestamp` DateTime `json:$.timestamp`,
`session_id` UUID `json:$.session_id`,
`action` String `json:$.action`,
`version` String `json:$.version`,
`payload` String `json:$.payload`
ENGINE "MergeTree"
ENGINE_PARTITION_KEY "toYYYYMM(timestamp)"
ENGINE_SORTING_KEY "timestamp"
ENGINE_TTL "timestamp + toIntervalDay(60)"
FORWARD_QUERY >
SELECT timestamp, CAST(session_id, 'UUID') as session_id, action, version, payload Tinybird runs a backfill to migrate the data to the new schema. These backfills are logged in `datasources_ops_log` with the `event_type` set to `deployment_backfill`.
If the existing data is incompatible with the schema change, the staging deployment fails and is discarded. For example, if you change a data type from `String` to `UUID` , but the existing data contains invalid values like `'abc'` , the deployment fails with this error:
» tb --cloud deploy
...
✓ Deployment submitted successfully
Deployment failed
* Error on datasource '<datasource_name>': Error migrating data: Populate job <job_id> failed, status: error
Rolling back deployment
Previous deployment is already live
Removing current deployment
Discard process successfully started
Discard process successfully completed If you're willing to accept data loss or default values for incompatible records, you can make the deployment succeed by using the [accurateCastOrDefault](/docs/sql-reference/functions/type-conversion-functions#accuratecastordefaultx-t-default-value) function in your forward query:
FORWARD_QUERY >
SELECT timestamp, accurateCastOrDefault(session_id, 'UUID') as session_id, action, version, payload After changes have been deployed and promoted, if you want to deploy other changes that don't affect that data source, you can remove the forward query.
## Landing data source engine settings [¶](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#landing-data-source-engine-settings)
When you make changes to the engine settings of a landing data source, such as changing the sorting or partition key, you can follow these steps:
1. In Tinybird Local, start a dev session with `tb dev`  .
2. Edit the .datasource file to add the changes. No forward query is required. See[  engine settings](/docs/forward/datafiles/datasource-files#engine-settings)  .
3. Run `tb deploy --check`   to validate the deployment before creating it. This is a good way of catching potential breaking changes.
4. Deploy and promote your changes in Tinybird Cloud using `tb --cloud deploy`  .
When Tinybird Cloud creates the deployment, it automatically populates the new table following the changes.
## Materialized data sources [¶](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#materialized-data-sources)
When editing materialized data sources, you need to consider the settings of the landing data sources that feed into them, especially the TTL (Time To Live) settings.
[Forward queries](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#forward-query) are essential when evolving materialized data sources, both schema and engine settings, to retain historical data.
If your landing data source has a shorter TTL than your materialized data source, you will get a warning when you deploy your changes. You will need to add a forward query to prevent data loss or, if you accept loss of historical data, add the `--allow-destructive-operations` flag to your deployment command.
For example, consider this scenario:
- Landing data source has a 7-day TTL.
- Materialized data source has no TTL (keeps data indefinitely).
- You want to change the data type of a column in the materialized data source.
Without a forward query, recalculating the materialized data source would only process the last 7 days of data due to the landing source's TTL, causing you to lose historical data beyond that period. To retain all historical data, use a forward query to transform the data from the live schema to the new one.
Here's an example materialized data source that uses a forward query to transform the data type of the `visits` column from `AggregateFunction(count, UInt16)` to `AggregateFunction(count, UInt64)`:
DESCRIPTION >
Materialized data source for daily page visits aggregation
SCHEMA >
`date` Date,
`page_url` String,
`visits` AggregateFunction(count, UInt64)
ENGINE "AggregatingMergeTree"
ENGINE_PARTITION_KEY "toYYYYMM(date)"
ENGINE_SORTING_KEY "date, page_url"
FORWARD_QUERY >
SELECT date, page_url, CAST(visits, 'AggregateFunction(count, UInt64)') AS visits Omitting the forward query instruction fully recalculates the materialized data source.
You can omit the forward query when:
- Landing data source has a longer TTL than the materialized data source, or no TTL.
- Making non-backward compatible changes, like adding a new group by column.
- Accepting loss of historical data.
## Next steps [¶](https://www.tinybird.co/docs/forward/test-and-deploy/evolve-data-source#next-steps)
- Learn more about[  deployments](/docs/forward/test-and-deploy/deployments)  .
- Learn about datafiles, like .datasource and .pipe files. See[  Datafiles](/docs/forward/datafiles)  .
---
URL: https://www.tinybird.co/docs/forward/test-and-deploy/deployments
Content:
---
title: "Deployments · Tinybird Docs"
theme-color: "#171612"
description: "Deploy your data project to Tinybird."
---
# Deployments in Tinybird [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#deployments-in-tinybird)
Copy as MD Changing state in data infrastructure can be complex. Each state transition must ensure data integrity and consistency.
Tinybird deployments simplify this process by providing robust mechanisms for managing state changes, allowing you to validate and push updates seamlessly while minimizing the risk of data conflicts or loss.
## What is a deployment? [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#what-is-a-deployment)
Deployments are versions of your project resources and data running on local or cloud infrastructure.
## Types of deployments [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#types-of-deployments)
There are two types of deployments:
- Staging deployments: Deployments you can use to validate your changes. You access them using the `--staging`   flag.
- Live deployments: Deployments that make your changes available to your users.
Each type can be deployed to Tinybird Local ( `--local` ) or Tinybird Cloud ( `--cloud` ).
## Deployment status [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#deployment-status)
Deployments have the following statuses:
- `In progress`   : The deployment is in progress. Use `--wait`   to wait for it to finish.
- `Live`   : The deployment is active and has been promoted from staging.
- `Staging`   : The deployment is active in staging. Use `--staging`   to access it.
- `Failed`   : The deployment failed. Try `tb deploy --check`   to debug the issue.
- `Deleted`   : The deployment was deleted as a result of creating new deployments.
## Deployment methods [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#deployment-methods)
The following deployment methods are available:
- [  CLI](/docs/forward/test-and-deploy/deployments/cli)  .
- [  CI/CD](/docs/forward/test-and-deploy/deployments/cicd)  .
## Staging deployments [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#staging-deployments)
You can write data to, and read data from, a staging deployment before promoting it to live. This is useful when you've made schema changes that might be incompatible with the current live deployment, like adding new columns.
### Writing to staging deployments [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#writing-to-staging-deployments)
You can use the [Events API](/docs/get-data-in/ingest-apis/events-api) to write directly to staging deployments through the `__tb_min_deployment` parameter, which indicates the target deployment ID. For example:
curl \
-H "Authorization: Bearer <import_token>" \
-d '{"date": "2020-04-05 00:05:38", "city": "Chicago", "new_column": "value"}' \
'https://api.tinybird.co/v0/events?name=events_test&__tb_min_deployment=5' In the example, if the ID of your current live deployment is 4 and you're creating deployment with an ID of 5, the data will be ingested into the staging deployment 5 only. This allows you to:
1. Make schema changes in a staging deployment.
2. Ingest data compatible with the new schema.
3. Validate the changes work as expected.
4. Promote the deployment to live when ready.
Without the parameter, data would be rejected if it doesn't match the schema of the current live deployment.
To get the deployment ID, run `tb deployment ls`.
### Reading from staging deployments [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#reading-from-staging-deployments)
You can query data from a staging deployment using [pipe endpoints](/docs/forward/publish-your-data/api-endpoints) . To access a staging endpoint, add the `__tb_deployment` parameter to your API request:
curl \
-H "Authorization: Bearer <query_token>" \
'https://api.tinybird.co/v0/pipes/my_endpoint?__tb_deployment=5' This allows you to:
1. Test your endpoints with the new schema changes.
2. Validate query results before promoting to live.
3. Ensure your application works correctly with the updated data structure.
To get the deployment ID, run `tb deployment ls`.
### Continuous operation [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#continuous-operation)
Once the deployment is promoted to live, you can continue using the same API calls. In the previous example, calls using the `__tb_min_deployment=5` or `__tb_deployment=5` parameters will keep working without interruption. The parameters ensure compatibility both before and after promotion.
For more details on the Events API parameters, see the [Events API Reference](/docs/api-reference/events-api).
## Next steps [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments#next-steps)
- See how to[  deploy your project using the CLI](/docs/forward/test-and-deploy/deployments/cli)  .
- See how to[  deploy your project using CI/CD](/docs/forward/test-and-deploy/deployments/cicd)  .
- Learn more about[  environments](/docs/forward/get-started/environments)  .
---
URL: https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Endpoints (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Endpoints make it easy to use the results of your queries in applications."
---
# Endpoints [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#endpoints)
Copy as MD Endpoints are a type of pipe that you can call from other applications. For example, you can ingest your data, build SQL logic inside a pipe, and then publish the result of your query as a REST API endpoint.
## Create an endpoint [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#create-an-endpoint)
Endpoints are defined in a .pipe file using the `TYPE ENDPOINT` directive. See [Endpoint pipes](/docs/forward/datafiles/pipe-files#endpoint-pipes).
You can list your endpoints and their URLs and tokens using the `tb endpoint` command. See [tb endpoint](/docs/forward/commands/tb-endpoint).
## Query parameters [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#query-parameters)
Query parameters are great for any value of the query that you might want control dynamically from your applications. For example, you can get your endpoint to answer different questions by passing a different value as query parameter.
Use dynamic parameters means to do things like:
- Filtering as part of a `WHERE`   clause.
- Changing the number of results as part of a `LIMIT`   clause.
- Sorting order as part of an `ORDER BY`   clause.
- Selecting specific columns for `ORDER BY`   or `GROUP BY`   clauses.
### Define dynamic parameters [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#define-dynamic-parameters)
To make a query dynamic, start the query with a `%` character. That signals the engine that it needs to parse potential parameters.
After you have created a dynamic query, you can define parameters by using the following pattern `{{<data_type>(<name_of_parameter>[,<default_value>, description=<"This is a description">, required=<True|False>])}}` . For example:
##### Simple select clause using dynamic parameters
%
SELECT * FROM TR LIMIT {{Int32(lim, 10, description="Limit the number of rows in the response", required=False)}} The previous query returns 10 results by default, or however many are specified on the `lim` parameter when requesting data from that API Endpoint.
### Call an endpoint with dynamic parameters [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#call-an-endpoint-with-dynamic-parameters)
When using an endpoint that uses parameters, pass in the desired parameters.
Using the previous example where `lim` sets the amount of maximum rows you want to get, the request would look like this:
##### Using an endpoint containing dynamic parameters
curl -d https://api.europe-west2.gcp.tinybird.co/v0/pipes/tr_pipe?lim=20&token=<your_token>
### Available data types for dynamic parameters [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#available-data-types-for-dynamic-parameters)
You can use the following data types for dynamic parameters:
- `Boolean`   : Accepts `True`   and `False`   as values, as well as strings like `'TRUE'`  , `'FALSE'`  , `'true'`  , `'false'`  , `'1'`   , or `'0'`   , or the integers `1`   and `0`  .
- `String`   : For any string values.
- `DateTime64`  , `DateTime`   and `Date`   : Accepts values like `YYYY-MM-DD HH:MM:SS.MMM`  , `YYYY-MM-DD HH:MM:SS`   and `YYYYMMDD`   respectively.
- `Float32`   and `Float64`   : Accepts floating point numbers of either 32 or 64 bit precision.
- `Int`   or `Integer`   : Accepts integer numbers of any precision.
- `Int8`  , `Int16`  , `Int32`  , `Int64`  , `Int128`  , `Int256`   and `UInt8`  , `UInt16`  , `UInt32`  , `UInt64`  , `UInt128`  , `UInt256`   : Accepts signed or unsigned integer numbers of the specified precision.
### Use column parameters [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#use-column-parameters)
You can use `column` to pass along column names of a defined type as parameters, like:
##### Using column dynamic parameters
%
SELECT * FROM TR
ORDER BY {{column(order_by, 'timestamp')}}
LIMIT {{Int32(lim, 10)}} Always define the `column` function's second argument, the one for the default value. The alternative for not defining the argument is to validate that the first argument is defined, but this only has an effect on the execution of the endpoint. A placeholder is used in the development of the Pipes.
##### Validate the column parameter when not defining a default value
%
SELECT * FROM TR
{% if defined(order_by) %}
ORDER BY {{column(order_by)}}
{% end %}
### Pass arrays [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#pass-arrays)
You can pass along a list of values with the `Array` function for parameters, like so:
##### Passing arrays as dynamic parameters
%
SELECT * FROM TR WHERE
access_type IN {{Array(access_numbers, 'Int32', default='101,102,110')}}
### Send stringified JSON as parameter [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#send-stringified-json-as-parameter)
Consider the following stringified JSON:
"filters": [
{
"operand": "date",
"operator": "equals",
"value": "2018-01-02"
},
{
"operand": "high",
"operator": "greater_than",
"value": "100"
},
{
"operand": "symbol",
"operator": "in_list",
"value": "AAPL,AMZN"
}
] You can use the `JSON()` function to use `filters` as a query parameter. The following example shows to use the `filters` field from the JSON snippet with the stock_prices_1m sample dataset.
%
SELECT symbol, date, high
FROM stock_prices_1m
WHERE
1
{% if defined(filters) %}
{% for item in JSON(filters, '[]') %}
{% if item.get('operator', '') == 'equals' %}
AND {{ column(item.get('operand', '')) }} == {{ item.get('value', '') }}
{% elif item.get('operator') == 'greater_than' %}
AND {{ column(item.get('operand', '')) }} > {{ item.get('value', '') }}
{% elif item.get('operator') == 'in_list' %}
AND {{ column(item.get('operand', '')) }} IN splitByChar(',',{{ item.get('value', '') }})
{% end %}
{% end %}
{% end %} When accessing the fields in a JSON object, use the following syntax:
item.get('Field', 'Default value to avoid SQL errors').
## Pagination [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#pagination)
You can paginate results by adding `LIMIT` and `OFFSET` clauses to your query. You can parameterize the values of these clauses, allowing you to pass pagination values as query parameters to your endpoint.
Use the `LIMIT` clause to select only the first `n` rows of a query result. Use the `OFFSET` clause to skip `n` rows from the beginning of a query result. Together, you can dynamically chunk the results of a query up into pages.
For example, the following query introduces two dynamic parameters `page_size` and `page` which lets you control the pagination of a query result using query parameters on the URL of an endpoint.
##### Paging results using dynamic parameters
%
SELECT * FROM TR
LIMIT {{Int32(page_size, 100)}}
OFFSET {{Int32(page, 0) * Int32(page_size, 100)}} You can also use pages to perform calculations such as `count()` . The following example counts the total number of pages:
##### Operation on a paginated endpoint
%
SELECT count() as total_rows, ceil(total_rows/{{Int32(page_size, 100)}}) pages FROM endpoint_to_paginate The addition of a `LIMIT` clause to a query also adds the `rows_before_limit_at_least` field to the response metadata. `rows_before_limit_at_least` is the lower bound on the number of rows returned by the query after transformations but before the limit was applied, and can be useful for response handling calculations.
To get consistent pagination results, add an `ORDER BY` clause to your paginated queries.
## Advanced templating [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#advanced-templating)
To build more complex queries, use flow control operators like `if`, `else` and `elif` in combination with the `defined()` function, which helps you to check if a parameter whether a parameter has been received and act accordingly.
Tinybird's templating system is based on the [Tornado Python framework](https://github.com/tornadoweb/tornado) , and uses Python syntax. You must enclose control statements in curly brackets with percentages `{%..%}` as in the following example:
##### Advanced templating using dynamic parameters
%
SELECT
toDate(start_datetime) as day,
countIf(status_code < 400) requests,
countIf(status_code >= 400) errors,
avg(duration) avg_duration
FROM
log_events
WHERE
endsWith(user_email, {{String(email, 'gmail.com')}}) AND
start_datetime >= {{DateTime(start_date, '2019-09-20 00:00:00')}} AND
start_datetime <= {{DateTime(end_date, '2019-10-10 00:00:00')}}
{% if method != 'All' %} AND method = {{String(method,'POST')}} {% end %}
GROUP BY
day
ORDER BY
day DESC
### Validate presence of a parameter [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#validate-presence-of-a-parameter)
To validate if a parameter is present in the query, use the `defined()` function. For example:
##### Validate if a param is in the query
%
select * from table
{% if defined(my_filter) %}
where attr > {{Int32(my_filter)}}
{% end %} When you call the endpoint with `/v0/pipes/:PIPE.json?my_filter=20` it applies the filter.
### Default parameter values and placeholders [¶](https://www.tinybird.co/docs/forward/publish-your-data/api-endpoints#default-parameter-values-and-placeholders)
Following best practices, you should set default parameter values as follows:
##### Default parameter values
%
SELECT * FROM table
WHERE attr > {{Int32(my_filter, 10)}} When you call the endpoint with `/v0/pipes/:PIPE.json` without setting any value to `my_filter` , it automatically applies the default value of 10.
If you don't set a default value for a parameter, you should validate that the parameter is defined before using it in the query as explained previously.
If you don't validate the parameter and it's not defined, the query might fail. Tinybird populates the parameter with a placeholder value based on the data type. For instance, numerical data types are populated with 0, strings with `__no_value__` , and date and timestamps with `2019-01-01` and `2019-01-01 00:00:00` respectively. You could try yourself with a query like this:
##### Get placeholder values
%
SELECT
{{String(param)}} as placeholder_string,
{{Int32(param)}} as placeholder_num,
{{Boolean(param)}} as placeholder_bool,
{{Float32(param)}} as placeholder_float,
{{Date(param)}} as placeholder_date,
{{DateTime(param)}} as placeholder_ts,
{{Array(param)}} as placeholder_array This returns the following values:
{
"placeholder_string": "__no_value__",
"placeholder_num": 0,
"placeholder_bool": 0,
"placeholder_float": 0,
"placeholder_date": "2019-01-01",
"placeholder_ts": "2019-01-01 00:00:00",
"placeholder_array": ["__no_value__0","__no_value__1"]
} When using `defined()` functions in the `WHERE` clause, make sure to add `1` and use the `AND` operator to avoid SQL syntax errors like:
SELECT * FROM table
WHERE 1
AND attr > {{Int32(my_filter)}}
---
URL: https://www.tinybird.co/docs/forward/get-started/workspaces
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Workspaces (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Workspaces contain your project's resources."
---
# Workspaces [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#workspaces)
Copy as MD A workspace is a set of Tinybird resources, like data sources, pipes, nodes, endpoints, and tokens. workspaces are always created inside organizations.
You can use workspaces to manage separate projects, use cases, and dev, staging, or production environments in Tinybird. Each workspace has administrators and members who can view and edit resources.
## Create a workspace [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#create-a-workspace)
When you authenticate using `tb login` , your default browser opens Tinybird Cloud. Select **Create workspace**.
If you don't have an organization defined, Tinybird Cloud allows you to also create an organization. Fill out the required information.
## Workspace ID [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#workspace-id)
The workspace ID is a unique identifier for each workspace.
To find the workspace ID using the CLI, run `tb workspace current` from the CLI:
tb workspace current
** Current workspace:
--------------------------------------------------------------------------------------------
| name                   | id                                   | role  | plan   | current |
--------------------------------------------------------------------------------------------
| tinybird_web_analytics | xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx | guest | Custom | True    |
--------------------------------------------------------------------------------------------
## List workspaces [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#list-workspaces)
List the workspaces you have access to, and the one that you're currently authenticated to:
##### List workspaces
tb workspace ls
## Delete a workspace [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#delete-a-workspace)
Deleting a workspace deletes all resources within the workspace, including data sources, ingested data, pipes, and published endpoints.
Deleted workspaces can't be recovered.
To delete a workspace using the CLI, use the following command:
tb workspace delete Provide the name of the workspace and your user token. For example:
tb workspace delete my_workspace --user_token <your user token>
## Manage workspace members [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#manage-workspace-members)
In Tinybird Cloud, go to **Settings** > **Members** to review any members already part of your workspace. You can invite as many members to a workspace as you want. A member can belong to multiple workspaces.
Add a new member by entering their email address and confirming their role from the menu. You can invite multiple users at the same time by adding multiple email addresses separated by a comma.
The users you invite get an email notifying them that they have been invited. If they don't already have a Tinybird account, they're prompted to create one to accept your invite.
Invited users appear in the user management modal and by default have the **Guest** role. If the user loses their invite link, you can resend it here too, or copy the link to your clipboard. You can also remove members from here using the "..." menu and selecting "Remove".
## User roles [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#user-roles)
Members always have a role assigned. You can modify the role of a user at any time.
Tinybird has the following member roles for workspaces:
| Role | Manage resources | Manage users | Create a branch |
| --- | --- | --- | --- |
| `Admin` | Yes | Yes | Yes |
| `Guest` | Yes | No | Yes |
| `Viewer` | No | No | Yes |
## Next steps [¶](https://www.tinybird.co/docs/forward/get-started/workspaces#next-steps)
- Familiarize yourself with datafiles. See[  Datafiles](/docs/forward/datafiles)  .
- Learn how to get data into Tinybird. See[  Get data in](/docs/forward/get-data-in)  .
---
URL: https://www.tinybird.co/docs/forward/get-started/self-managed
Content:
---
title: "Self-managed regions · Tinybird Docs"
theme-color: "#171612"
description: "Create your own Tinybird Cloud region in the cloud service provider of your choice."
---
# Self-managed regions [¶](https://www.tinybird.co/docs/forward/get-started/self-managed#self-managed-regions)
Copy as MD By default, Tinybird Forward relies on [Tinybird managed regions](/docs/api-reference#regions-and-endpoints) . Self-managed regions allow you to run Tinybird infrastructure in your own cloud environment while still benefiting from Tinybird Cloud's management capabilities. This gives you more control over data residency, compliance requirements, and infrastructure costs while maintaining the same Tinybird experience.
Self-managed regions are currently in beta. Use them for development environments only; avoid production workloads. Features, requirements, and implementation details might change as we continue to improve this capability.
## Key benefits [¶](https://www.tinybird.co/docs/forward/get-started/self-managed#key-benefits)
Key benefits of self-managed regions include:
- Data sovereignty and compliance: Keep your data in specific geographic locations to meet regulatory requirements.
- Integration: Connect directly to your existing data sources and internal systems without data leaving your network.
- Complete customization: Tailor performance by optimizing hardware resources for your specific workload patterns.
- Cost efficiency: Avoid egress fees and leverage your existing cloud commitments and reserved instances.
## Limitations [¶](https://www.tinybird.co/docs/forward/get-started/self-managed#limitations)
Self-managed regions have some limitations compared to Tinybird managed regions:
- You are responsible for infrastructure maintenance, scaling, and security.
- Some advanced features may require additional configuration.
- Performance tuning and optimization are your responsibility.
- Upgrades must be managed manually by redeploying with newer container versions.
## How self-managed regions work [¶](https://www.tinybird.co/docs/forward/get-started/self-managed#how-self-managed-regions-work)
When you set up a self-managed region:
1. You register a region with Tinybird Cloud.
2. You deploy the Tinybird Local container in your cloud environment.
3. You interact with your self-managed region directly using the Tinybird CLI with the `--cloud`   flag.
This approach gives you complete control over your data and infrastructure while maintaining the familiar Tinybird developer experience.
## Add a self-managed region [¶](https://www.tinybird.co/docs/forward/get-started/self-managed#add-a-self-managed-region)
There are two main ways to create a self-managed region:
- Manually. See[  Create a self-managed region manually](/docs/forward/get-started/self-managed/manual)  .
- Using the `tb infra init`   command. See[  Use the CLI to add a self-managed region](/docs/forward/get-started/self-managed/assisted)  .
## Supported clouds [¶](https://www.tinybird.co/docs/forward/get-started/self-managed#supported-clouds)
The following cloud service providers are supported:
- AWS
- GCP (Coming soon)
- Azure (Coming soon)
You can also create a self-managed region by deploying the container on the following Platform as a Service (PaaS) providers:
- Fly.io
- Zeet
- Google Cloud Run
- CloudFoundry
- Azure Container Instances
- DigitalOcean App Platform
---
URL: https://www.tinybird.co/docs/forward/get-started/migrate
Last update: 2025-03-21T09:51:11.000Z
Content:
---
title: "Migrate from Tinybird Classic · Tinybird Docs"
theme-color: "#171612"
description: "Migrate your project from Tinybird Classic to Tinybird Forward."
---
# Migrate from Tinybird Classic [¶](https://www.tinybird.co/docs/forward/get-started/migrate#migrate-from-tinybird-classic)
Copy as MD Tinybird Forward is a new way of working with your data projects. It includes changes to Tinybird APIs and CLI, some of which are incompatible with Tinybird Classic.
If you want to start building new projects in Tinybird Forward, see the [Get started](/docs/forward) guide.
## Considerations before migrating [¶](https://www.tinybird.co/docs/forward/get-started/migrate#considerations-before-migrating)
Before migrating your data project from Tinybird Classic, understand these key differences in Tinybird Forward:
- Development happens locally using the[  Tinybird Local container](/docs/forward/get-started/install-tinybird/local)   , not in the UI.
- The following features are currently not supported:
- DynamoDB connector
- Sinks
- BI Connector
- Shared Data Sources
- `TYPE`     endpoint in datafiles
- `VERSION`     tag in datafiles
- CI/CD workflows use different CLI commands than Classic.
If these changes work for your use case, continue reading to learn how to migrate.
Migration is only available for Free or Developer plan users. If you're an Enterprise customer, contact Tinybird support ( [support@tinybird.co](mailto:support@tinybird.co) ) to discuss migration options.
## Migrate your datafiles [¶](https://www.tinybird.co/docs/forward/get-started/migrate#migrate-your-datafiles)
To migrate your datafiles, you need the Tinybird Classic CLI installed. See [install Tinybird Classic CLI](/docs/cli/install).
Before running the Tinybird Classic CLI commands, deactivate Tinybird Local by running `tb local stop`.
1
### Authenticate and pull your project [¶](https://www.tinybird.co/docs/forward/get-started/migrate#authenticate-and-pull-your-project)
In a virtual environment with the Tinybird Classic CLI installed, run the following commands to authenticate to your Tinybird Classic workspace and pull your datafiles:
# Authenticate to your Tinybird Classic workspace
tb auth --token [admin <your-email> token]
# Pull your datafiles and save them in the default directories
tb pull --auto
# Deactivate the virtual environment
deactivate 2
### Install the Tinybird Forward CLI [¶](https://www.tinybird.co/docs/forward/get-started/migrate#install-the-tinybird-forward-cli)
Run the following command to install the Tinybird Forward CLI and the Tinybird Local container:
curl https://tinybird.co | sh See [install Tinybird Forward](/docs/forward/get-started/install-tinybird) for more information.
3
### Log in and create a workspace [¶](https://www.tinybird.co/docs/forward/get-started/migrate#log-in-and-create-a-workspace)
Run the following command to log in to Tinybird Cloud:
# Access the help menu to find the available list of regions
tb login -h
# Log in to your region
tb login --host <your-region> Follow the instructions to create a new workspace and return to the CLI.
4
### Build your project [¶](https://www.tinybird.co/docs/forward/get-started/migrate#build-your-project)
Run the following commands to start the local container and build your project, ensuring that your datafiles are compatible with Tinybird Forward:
# Start the local container
tb local start
# Build your project in watch mode
tb dev As you develop, Tinybird rebuilds the project and notifies you of any errors.
You might need to make the following changes to your datafiles:
- .pipe datafiles must include `TYPE endpoint`   to be published as API endpoints, like this:
##### example.pipe
NODE my_node
SQL >
SELECT * FROM my_data_source
TYPE endpoint
- The `VERSION`   tag in datafiles isn't supported. If any of your datafiles contain `VERSION`   , remove it.
- If you ingest data using the Kafka or S3 connectors, configure them in your project using .connection files. See[  connectors](/docs/forward/get-data-in/connectors)  .
When you finish developing, exit the `tb dev` session.
5
### Deploy to Tinybird Cloud [¶](https://www.tinybird.co/docs/forward/get-started/migrate#deploy-to-tinybird-cloud)
Run the following commands to deploy your project:
# Optional: deploy to Tinybird Local to validate your project locally
tb deploy
# Deploy to Tinybird Cloud
tb --cloud deploy See [deployments](/docs/forward/test-and-deploy/deployments) for more information.
Your project is now set up in Tinybird Forward, but it doesn't contain data. The next section explains how to backfill data from your Tinybird Classic workspace.
6
### Use the new tokens [¶](https://www.tinybird.co/docs/forward/get-started/migrate#use-the-new-tokens)
Before you start ingesting new data or serving requests from your new workspace, update your tokens. See [authentication](/docs/forward/get-started/authentication).
## Backfill your data [¶](https://www.tinybird.co/docs/forward/get-started/migrate#backfill-your-data)
If you want to backfill existing data from your Tinybird Classic workspace, follow these steps.
See [Backfill from external sources](/docs/work-with-data/strategies/backfill-from-external) for tips on how to optimize backfills.
The process to migrate your data is currently a manual, batch process. Reach out to Tinybird support ( [support@tinybird.co](mailto:support@tinybird.co) ) if you need help with the migration.
1
### Duplicate streaming ingestion [¶](https://www.tinybird.co/docs/forward/get-started/migrate#duplicate-streaming-ingestion)
If you are ingesting streaming data from Kafka or the Events API, duplicate ingestion to the landing data source in your new Tinybird Forward workspace. This lets you serve the same data from Classic and Forward.
In your Tinybird Forward workspace, identify the minimum timestamp to use as your milestone. In the next steps, you backfill data from before the milestone.
2
### Export to S3 [¶](https://www.tinybird.co/docs/forward/get-started/migrate#export-to-s3)
In your Tinybird Classic workspace, create an [S3 sink](/docs/publish/sinks/s3-sink) to export the data from the landing data source to an S3 bucket. Use Parquet format for optimal performance.
Add a filter in your query to select data from before the milestone:
NODE sink_node
SQL >
SELECT ... FROM my_streaming_data
WHERE timestamp < 'milestone_datetime'
TYPE sink
# Add remaining sink settings This ensures that your project doesn't contain duplicate records when combining streaming and backfill data.
If your query exceeds the [sink limits](/docs/get-started/plans/limits#sink-limits) , use [query parameters](/docs/publish/sinks/s3-sink#query-parameters) or a [file template](/docs/publish/sinks/s3-sink#file-template) to break the export into smaller files.
3
### Import from S3 [¶](https://www.tinybird.co/docs/forward/get-started/migrate#import-from-s3)
In your Tinybird Forward workspace, create an [S3 connector and data source](/docs/forward/get-data-in/connectors/s3) isolated from downstream resources. Keeping ingestion and transformation separate simplifies the process.
[Test and deploy](/docs/forward/test-and-deploy) your changes to start ingesting your data.
4
### Combine streaming and backfill data [¶](https://www.tinybird.co/docs/forward/get-started/migrate#combine-streaming-and-backfill-data)
After importing your backfill data from S3, you need to merge it with your real-time streaming data. You can do this in two ways:
#### 1. Use a copy pipe [¶](https://www.tinybird.co/docs/forward/get-started/migrate#1-use-a-copy-pipe)
Create a [copy pipe](/docs/forward/work-with-data/copy-pipes) and set the streaming data source as the destination.
Copy jobs are atomic and give you better control over the backfill process.
If your data exceeds the [copy limits](/docs/get-started/plans/limits#copy-pipe-limits) , break the backfill into smaller jobs using query parameters to filter by date range or tenant ID.
This approach is best for projects with large data volumes and many downstream dependencies (e.g. multiple complex materialized views).
#### 2. Use a materialized view [¶](https://www.tinybird.co/docs/forward/get-started/migrate#2-use-a-materialized-view)
Create a [materialized pipe](/docs/forward/work-with-data/materialized-views) and set the streaming data source as the destination.
This approach is best for projects with few downstream dependencies.
Test everything locally, and deploy your changes to Tinybird Cloud.
---
URL: https://www.tinybird.co/docs/forward/get-started/install-tinybird
Content:
---
title: "Install Tinybird Local · Tinybird Docs"
theme-color: "#171612"
description: "Learn how to install Tinybird Local on your machine."
---
# Install Tinybird Forward [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird#install-tinybird-forward)
Copy as MD Tinybird Forward consists of CLI tools and a containerized version of Tinybird that you can install on your machine or deploy on a cloud provider.
## Prerequisites [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird#prerequisites)
To install and use Tinybird Forward on your machine, you need to have the following prerequisites:
- [  A free Tinybird account](https://cloud.tinybird.co/)
- A container runtime, like Docker or Orbstack
- Linux or macOS
## Install Tinybird Forward on your machine [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird#install-tinybird-forward-on-your-machine)
To install Tinybird Forward, run the following command:
curl https://tinybird.co | sh This installs the Tinybird Forward CLI and the [Tinybird Local container](/docs/forward/get-started/install-tinybird/local).
## Authenticate with Tinybird Cloud [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird#authenticate-with-tinybird-cloud)
To authenticate your local environment with Tinybird Cloud, run the following command:
tb login This opens a browser window where you can sign in to Tinybird Cloud.
## Install on a cloud provider [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird#install-on-a-cloud-provider)
To install Tinybird Forward on a cloud provider, see [Self-managed cloud](/docs/forward/get-started/self-managed).
## Next steps [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird#next-steps)
- Familiarize yourself with the core concepts of Tinybird. See[  Concepts](/docs/forward/get-started/concepts)  .
- Learn about environments. See[  Environments](/docs/forward/get-started/environments)  .
- Learn about datafiles and their format. See[  Datafiles](/docs/forward/datafiles)  .
- Browse the full CLI reference. See[  Command reference](/docs/forward/commands)  .
---
URL: https://www.tinybird.co/docs/forward/get-started/environments
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Environments · Tinybird Docs"
theme-color: "#171612"
description: "Learn about the different environments in Tinybird Forward"
---
# Environments [¶](https://www.tinybird.co/docs/forward/get-started/environments#environments)
Copy as MD Tinybird Forward has three environments that serve different purposes: Development, Local, and Cloud.
Typically, you use the Development environment to test your changes before deploying them to the Local or Cloud environment.
## Comparison of environments [¶](https://www.tinybird.co/docs/forward/get-started/environments#comparison-of-environments)
The following table summarizes the different environments and the commands you can use to interact with them.
| Environment | Global flag | Host | Token |
| --- | --- | --- | --- |
| Development | Use `tb dev`   to run commands in the dev environment. | `http://localhost:7181`   while `tb dev`   is running. | Run `tb token ls`   from within the dev prompt. |
| Local | `--local`   (by default, all commands run as local) | `http://localhost:7181`   after a local[  deployment](/docs/forward/test-and-deploy/deployments/cli)  . | Run `tb token ls`   from the terminal. |
| Cloud | `--cloud` | [  Tinybird region](/docs/api-reference#regions-and-endpoints)   or a custom URL from[  self-managed regions](/docs/forward/get-started/self-managed)  . | Get your token from**  Tokens**   in Tinybird Cloud. |
## Environments and regions [¶](https://www.tinybird.co/docs/forward/get-started/environments#environments-and-regions)
All Tinybird environments map to a region.
- Development and Local environments map to the Tinybird Local region.
- Cloud environments map to a Tinybird Cloud region, which can be a default or a custom region.
## Switch regions in Tinybird [¶](https://www.tinybird.co/docs/forward/get-started/environments#switch-regions-in-tinybird)
You can switch region in Tinybird Cloud using the region selector:
1. Open Tinybird Cloud at https://cloud.tinybird.co
2. Select your current region.
3. Select the region you want to switch to.
The Tinybird Local region is available only if you have a local deployment running.
## Next steps [¶](https://www.tinybird.co/docs/forward/get-started/environments#next-steps)
- Learn about deployments. See[  Deployments](/docs/forward/test-and-deploy/deployments)  .
- Familiarize yourself with datafiles. See[  Datafiles](/docs/forward/datafiles)  .
- Learn how to get data into Tinybird. See[  Get data in](/docs/forward/get-data-in)  .
- Learn how to test and deploy your changes. See[  Test and deploy](/docs/forward/test-and-deploy)  .
---
URL: https://www.tinybird.co/docs/forward/get-started/concepts
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Core concepts of Tinybird Forward · Tinybird Docs"
theme-color: "#171612"
description: "Learn the core concepts of Tinybird Forward, how it works, and how to use it."
---
# Core concepts of Tinybird Forward [¶](https://www.tinybird.co/docs/forward/get-started/concepts#core-concepts-of-tinybird-forward)
Copy as MD Tinybird Forward is built around several core concepts that abstract the underlying infrastructure and data storage.
To make the most of Tinybird Forward, it's important to understand these core concepts.
## Develop locally, deploy remotely [¶](https://www.tinybird.co/docs/forward/get-started/concepts#develop-locally-deploy-remotely)
Tinybird Forward is a platform for building analytics features in your application. It's comprised of the following components:
- Tinybird Forward CLI, a command-line tool to build, iterate, and deploy data projects.
- Tinybird Local, a Docker container that runs a local deployment of Tinybird.
- Tinybird Cloud, the web interface to manage your Tinybird Forward deployment.
The typical workflow is as follows:
1. You develop your[  data project](/docs/forward/datafiles)   locally using Tinybird Local and version control.
2. Changes are[  iterated](/docs/forward/test-and-deploy)   and tested locally before anything is deployed in Tinybird Cloud.
3. When you're ready, you[  deploy your data project](/docs/forward/test-and-deploy/deployments)   to Tinybird Cloud, which enables endpoints and sinks.
4. In[  Tinybird Cloud](https://cloud.tinybird.co/)   you can browse and query your data, check observability, and more.
The following diagram illustrates the development and usage flow, from local development to deployment in Tinybird Cloud.
## Your projects live in workspaces [¶](https://www.tinybird.co/docs/forward/get-started/concepts#your-projects-live-in-workspaces)
A [workspace](/docs/forward/get-started/workspaces) contains the resources, data, and state of your Tinybird Forward project. You can have as many workspaces as you need and invite users to collaborate.
Each workspace contains, at a minimum, a source of data, a processing resource, and an output destination. The following diagram illustrates the relationship between resources in a workspace.
## Data enters through data sources [¶](https://www.tinybird.co/docs/forward/get-started/concepts#data-enters-through-data-sources)
Data sources are how you ingest and store data in Tinybird Forward. All your data lives inside a data source, and you write SQL queries against data sources. You can bulk upload or stream data into a data source.
You can bring data in from the following sources:
- Files in your local file system.
- Files in your cloud storage bucket.
- Events sent to the[  Events API](/docs/forward/get-data-in/events-api)  .
- Events streamed from Kafka.
Data sources are defined in .datasource files. See [Datasource files](/docs/forward/datafiles/datasource-files) for more information.
## Use pipes to process your data [¶](https://www.tinybird.co/docs/forward/get-started/concepts#use-pipes-to-process-your-data)
Pipes are how you write SQL logic in Tinybird Forward. They're a collection of one or more SQL queries chained together, or nodes. Pipes let you break larger queries down into smaller queries that are easier to read.
With pipes you can:
- Process data in nodes.
- Publish API endpoints.
- Create materialized views.
- Create copies of data.
[Pipes](/docs/forward/work-with-data/pipes) are defined in .pipe files. See [Pipe files](/docs/forward/datafiles/pipe-files) for more information.
## Outputs are where your data goes [¶](https://www.tinybird.co/docs/forward/get-started/concepts#outputs-are-where-your-data-goes)
When your processed data is ready to be consumed by your application, you can publish it through API endpoints, or by exporting data to external systems on a scheduled or on-demand basis through sinks.
The following outputs are available:
- [  API endpoints](/docs/forward/publish-your-data/api-endpoints)   , which you can call using custom parameters from any application.
- Sinks, which export data to external systems on a scheduled or on-demand basis.
Endpoints and sinks are defined in .pipe files. See [Pipe files](/docs/forward/datafiles/pipe-files) for more information.
## To go live, promote a deployment [¶](https://www.tinybird.co/docs/forward/get-started/concepts#to-go-live-promote-a-deployment)
After you develop your project, you can deploy it to Tinybird Local or Tinybird Cloud. This creates a deployment, which is a version of your project resources and data running on local or cloud infrastructure.
When you're ready to go live, you can promote your deployment in Tinybird Cloud. This makes your deployment available to your users. In other words, the deployment is live.
See [Environments](/docs/forward/get-started/environments) and [Deployments](/docs/forward/test-and-deploy/deployments) for more information.
---
URL: https://www.tinybird.co/docs/forward/get-started/authentication
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Authentication · Tinybird Docs"
theme-color: "#171612"
description: "Learn how to authenticate your requests to Tinybird."
---
# Authentication [¶](https://www.tinybird.co/docs/forward/get-started/authentication#authentication)
Copy as MD Tinybird uses tokens to authenticate CLI and API requests. Tokens protect access to your resources. Any operation to manage your resources using the CLI or REST API requires a valid token with the necessary permissions.
There are two types of tokens:
- Static[  tokens](https://www.tinybird.co/docs/forward/get-started/authentication#tokens)   : Used when performing operations on your account, like importing data, creating data sources, or publishing endpoints.
- [  JWT tokens](https://www.tinybird.co/docs/forward/get-started/authentication#json-web-tokens-jwts)   : Used when publishing an endpoint that exposes your data to an application.
## Authenticate from local [¶](https://www.tinybird.co/docs/forward/get-started/authentication#authenticate-from-local)
When working with [Tinybird Local](/docs/forward/get-started/install-tinybird/local) , you can authenticate by running `tb login` . For example:
tb login The command opens a browser window where you can sign in. See [tb login](/docs/forward/commands/tb-login).
Credentials are stored in the `.tinyb` file. See [.tinyb file](/docs/forward/datafiles/tinyb-file).
## Static tokens [¶](https://www.tinybird.co/docs/forward/get-started/authentication#static-tokens)
Static tokens are permanent and long-term. They're stored inside Tinybird and don't have an expiration date or time. They're useful for backend-to-backend integrations, where you call Tinybird as another service.
### Default workspace tokens [¶](https://www.tinybird.co/docs/forward/get-started/authentication#default-workspace-tokens)
All workspaces are created with a set of basic tokens that you can add to by creating additional tokens:
- `admin token`   for that workspace, used for signing JWTs.
- `admin <your-email> token`   for that workspace that belongs specifically to your user account for CLI usage.
- `create datasource token`   for creating data sources in that workspace.
- `user token`   for creating new workspaces or deleting ones where are an admin.
Other tokens are created automatically by Tinybird during certain operations like scheduled copies.
### User tokens [¶](https://www.tinybird.co/docs/forward/get-started/authentication#user-tokens)
Your user token is specific to your user account. It's a permanent token that lets you perform operations that aren't limited to a single workspace, such as creating new workspaces.
Each user in your organization has their own user token. User tokens are not affected by deployments.
### Resource-scoped tokens [¶](https://www.tinybird.co/docs/forward/get-started/authentication#resource-scoped-tokens)
Resource-scoped tokens grant specific permissions on specific resources, such as reading from a given endpoint or appending to a given data source.
Resource-scoped tokens are managed using the `TOKEN` directive in datafiles, and are created and updated through deployments.
The following example shows how a token is applied to a .datasource file:
TOKEN landing_read READ
TOKEN landing_append APPEND
SCHEMA >
...
### Create a static token [¶](https://www.tinybird.co/docs/forward/get-started/authentication#create-a-static-token)
Although deployments already create resource-scoped tokens, there might be cases when you need to create a static token.
To manually create a static token, run the `tb token create static` command. For example:
tb token create static my_static_token --scope ORG_DATASOURCES:READ To refresh a token, run the `tb token refresh` command. For example:
tb token refresh my_static_token See [tb token create](/docs/forward/commands/tb-token) for more information.
### Token scopes [¶](https://www.tinybird.co/docs/forward/get-started/authentication#token-scopes)
When you create a token, you can give it a set of zero or more scopes that define which tables can be accessed by that token, and which methods can be used to access them.
You can augment a `READ` token with an SQL filter. A filter lets you restrict what data a token grants access to.
The following scopes are available:
| Value | Description |
| --- | --- |
| `DATASOURCES:READ:datasource_name` | Gives your token read permissions for the specified data sources. Also gives read for the quarantine data source. |
| `DATASOURCES:READ:datasource_name:sql_filter` | Gives your token read permissions for the specified table with the `sql_filter`   applied. |
| `PIPES:READ:pipe_name` | Gives your token read permissions for the specified Pipe. |
| `PIPES:READ:pipe_name:sql_filter` | Gives your token read permissions for the specified Pipe with the `sql_filter`   applied. |
| `TOKENS` | Gives your token the capacity of managing tokens. |
| `ADMIN` | All permissions are granted. Do not use this token except in really specific cases. |
| `ORG_DATASOURCES:READ` | Gives your token the capacity of reading organization service datasources, without using an org admin-level token. |
When adding the `DATASOURCES:READ` scope to a token, it automatically gives read permissions to the [quarantine data source](/docs/forward/get-data-in/quarantine) associated with it.
## JSON Web tokens (JWTs) [¶](https://www.tinybird.co/docs/forward/get-started/authentication#json-web-tokens-jwts)
JWTs are signed tokens that allow you to securely authorize and share data between your application and Tinybird.
Unlike static tokens, JWTs are not stored in Tinybird. They're created by you, inside your application, and signed with a shared secret between your application and Tinybird. Tinybird validates the signature of the JWT, using the shared secret, to ensure it's authentic.
The primary purpose for JWTs is to allow your app to call Tinybird API endpoints from the frontend without proxying through your backend. If you are building an application where a frontend component needs data from a Tinybird API endpoint, you can use JWTs to authorize the request directly from the frontend.
The typical pattern looks like this:
1. A user starts a session in your application.
2. The frontend requests a JWT from your backend.
3. Your backend generates a new JWT, signed with the Tinybird shared secret, and returns to the frontend.
4. The frontend uses the JWT to call the Tinybird API endpoints directly.
### JWT payload [¶](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-payload)
The payload of a JWT is a JSON object that contains the following fields:
| Key | Example Value | Required | Description |
| --- | --- | --- | --- |
| workspace_id | workspaces_id | Yes | The UUID of your Tinybird workspace, found in the workspace list. |
| name | frontend_jwt | Yes | Used to identify the token in the `tinybird.pipe_stats_rt`   table, useful for analytics. Doesn't need to be unique. |
| exp | 123123123123 | Yes | The Unix timestamp (UTC) showing the expiry date & time. After a token has expired, Tinybird returns a 403 HTTP status code. |
| scopes | [{"type": "PIPES:READ", "resource": "requests_per_day", "fixed_params": {"org_id": "testing"}}] | Yes | Used to pass data to Tinybird, including the Tinybird scope, resources and fixed parameters. |
| scopes.type | PIPES:READ | Yes | The type of scope, for example `READ`   . See[  JWT scopes](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-scopes)   for supported scopes. |
| scopes.resource | t_b9427fe2bcd543d1a8923d18c094e8c1 or top_airlines | Yes | The ID or name of the Pipe that the scope applies to, like which API endpoint the token can access. |
| scopes.fixed_params | {"org_id": "testing"} | No | Pass arbitrary fixed values to the API endpoint. These values can be accessed by Pipe templates to supply dynamic values at query time. |
| limits | {"rps": 10} | No | You can limit the number of requests per second the JWT can perform. See[  JWT rate limit](https://www.tinybird.co/docs/forward/get-started/authentication#rate-limits-for-jwt-tokens)  . |
Check out the [JWT example](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-example) to see what a complete payload looks like.
### JWT algorithm [¶](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-algorithm)
Tinybird always uses HS256 as the algorithm for JWTs and doesn't read the `alg` field in the JWT header. You can skip the `alg` field in the header.
### JWT scopes [¶](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-scopes)
| Value | Description |
| --- | --- |
| `PIPES:READ:pipe_name` | Gives your token read permissions for the specified Pipe |
### JWT expiration [¶](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-expiration)
JWTs can have an expiration time that gives each token a finite lifespan.
Setting the `exp` field in the JWT payload is mandatory, and not setting it results in a 403 HTTP status code from Tinybird when requesting the API endpoint.
Tinybird validates that a JWT hasn't expired before allowing access to the API endpoint.
If a token has expired, Tinybird returns a 403 HTTP status code.
### JWT fixed parameters [¶](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-fixed-parameters)
Fixed parameters allow you to pass arbitrary values to the API endpoint. These values can be accessed by Pipe templates to supply dynamic values at query time.
For example, consider the following fixed parameter:
##### Example fixed parameters
{
"fixed_params": {
"org_id": "testing"
}
} This passes a parameter called `org_id` with the value `testing` to the API endpoint. You can then use this value in your SQL queries:
##### Example SQL query
SELECT fieldA, fieldB FROM my_pipe WHERE org_id = '{{ String(org_id) }}' This is particularly useful when you want to pass dynamic values to an API endpoint that are set by your backend and must be safe from user tampering. A good example is multi-tenant applications that require row-level security, where you need to filter data based on a user or tenant ID.
The value `org_id` is always the one specified in the `fixed_params` . Even if you specify a new value in the URL when requesting the endpoint, Tinybird always uses the one specified in the JWT.
### JWT example [¶](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-example)
Consider the following payload with all [required and optional fields](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-payload):
##### Example payload
{
"workspace_id": "workspaces_id",
"name": "frontend_jwt",
"exp": 123123123123,
"scopes": [
{
"type": "PIPES:READ",
"resource": "requests_per_day",
"fixed_params": {
"org_id": "testing"
}
}
],
"limits": {
"rps": 10
}
} Use the admin token from your workspace to sign the payload, for example:
##### Example workspace admin token
p.eyJ1IjogIjA1ZDhiYmI0LTdlYjctND... With the payload and admin token, the signed JWT payload would look like this:
##### Example JWT
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3b3Jrc3BhY2V...
### JWT limitations [¶](https://www.tinybird.co/docs/forward/get-started/authentication#jwt-limitations)
The following limitations apply to JWTs:
- You can't refresh JWTs individually from inside Tinybird as they aren't stored in Tinybird. You must do this from your application, or you can globally invalidate all JWTs by refreshing your admin token.
- If you refresh your admin token, all the tokens are invalidated.
- If your token expires or is invalidated, you get a 403 HTTP status code from Tinybird when requesting the API endpoint.
### Create a JWT in production [¶](https://www.tinybird.co/docs/forward/get-started/authentication#create-a-jwt-in-production)
There is wide support for creating JWTs in many programming languages and frameworks. Any library that supports JWTs should work with Tinybird.
- JavaScript (Next.js)
- Python
##### Create a JWT in Python using pyjwt
import jwt
import datetime
import os
TINYBIRD_SIGNING_KEY = os.getenv('TINYBIRD_SIGNING_KEY')
def generate_jwt():
expiration_time = datetime.datetime.utcnow() + datetime.timedelta(hours=3)
payload = {
"workspace_id": "workspaces_id",
"name": "frontend_jwt",
"exp": expiration_time,
"scopes": [
{
"type": "PIPES:READ",
"resource": "requests_per_day",
"fixed_params": {
"org_id": "testing"
}
}
]
}
return jwt.encode(payload, TINYBIRD_SIGNING_KEY, algorithm='HS256')
### Create a JWT token [¶](https://www.tinybird.co/docs/forward/get-started/authentication#create-a-jwt-token)
If for any reason you don't want to generate a JWT on your own, Tinybird provides a command and an endpoint to create a JWT token.
- API
- CLI
##### Create a JWT with the Tinybird CLI
tb token create jwt my_jwt --ttl 1h --scope PIPES:READ --resource my_pipe --filters "column_name=value"
### Error handling [¶](https://www.tinybird.co/docs/forward/get-started/authentication#error-handling)
There are many reasons why a request might return a `403` status code. When a `403` is received, check the following:
1. Confirm the JWT is valid and hasn't expired. The expiration time is in the `exp`   field in the JWT's payload.
2. The generated JWTs can only read Tinybird API endpoints. Confirm you're not trying to use the JWT to access other APIs.
3. Confirm the JWT has a scope to read the endpoint you are trying to read.
4. If you generated the JWT outside of Tinybird, without using the API or the CLI, make sure you are using the**  workspace** `admin token`   , not your personal one.
### Rate limits for JWTs [¶](https://www.tinybird.co/docs/forward/get-started/authentication#rate-limits-for-jwts)
Check the [limits page](/docs/get-started/plans/limits) for limits on ingestion, queries, API Endpoints, and more.
When you specify a `limits.rps` field in the payload of the JWT, Tinybird uses the name specified in the payload of the JWT to track the number of requests being done. If the number of requests goes beyond the limit, Tinybird starts rejecting new requests and returns an "HTTP 429 Too Many Requests" error.
The following example shows the tracking of all requests done by `frontend_jwt` . Once you reach 10 requests per second, Tinybird would start rejecting requests:
##### Example payload with global rate limit
{
"workspace_id": "workspaces_id",
"name": "frontend_jwt",
"exp": 123123123123,
"scopes": [
{
"type": "PIPES:READ",
"resource": "requests_per_day",
"fixed_params": {
"org_id": "testing"
}
}
],
"limits": {
"rps": 10
}
} If `rps <= 0` , Tinybird ignores the limit and assumes there is no limit.
As the `name` field doesn't have to be unique, all the tokens generated using the `name=frontend_jwt` would be under the same umbrella. This can be useful if you want to have a global limit in one of your apps or components.
If you want to limit for each specific user, you can generate a JWT using the following payload. In this case, you would specify a unique name so the limits only apply to each user:
##### Example of a payload with isolated rate limit
{
"workspace_id": "workspaces_id",
"name": "frontend_jwt_user_<unique identifier>",
"exp": 123123123123,
"scopes": [
{
"type": "PIPES:READ",
"resource": "requests_per_day",
"fixed_params": {
"org_id": "testing"
}
}
],
"limits": {
"rps": 10
}
}
## Next steps [¶](https://www.tinybird.co/docs/forward/get-started/authentication#next-steps)
- Learn about[  workspaces](/docs/forward/get-started/workspaces)  .
- Learn about[  endpoints](/docs/forward/publish-your-data/api-endpoints)  .
---
URL: https://www.tinybird.co/docs/forward/get-data-in/quarantine
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Quarantine · Tinybird Docs"
theme-color: "#171612"
description: "Quarantine data sources store data that doesn't fit the schema."
---
# Quarantine data sources [¶](https://www.tinybird.co/docs/forward/get-data-in/quarantine#quarantine-data-sources)
Copy as MD Every data source in your workspace has an associated quarantine data source that stores data that doesn't fit the schema. If you send rows that don't match the data source schema, they're automatically sent to the quarantine table so that the ingest process doesn't fail.
By convention, quarantine data sources follow the naming pattern `{datasource_name}_quarantine` . You can review quarantined rows at any time or perform operations on them using Pipes. This is a useful source of information when fixing issues in the origin source or applying changes during ingest.
## Review quarantined data [¶](https://www.tinybird.co/docs/forward/get-data-in/quarantine#review-quarantined-data)
To check your quarantine data sources, run the `tb sql` command. For example:
tb sql "select * from <datasource_name>_quarantine limit 10" A sample output of the `tb sql` command is the following:
──────────────────────────────────────────────────────────────────
c__error_column: ['abslevel']
c__error: ["value '' on column 'abslevel' is not Float32"]
c__import_id: 01JKQPWT8GVXAN5GJ1VBD4XM27
day: 2014-07-30
station: Embassament de Siurana (Cornudella de Montsant)
volume: 11.57
insertion_date: 2025-02-10 10:36:20
────────────────────────────────────────────────────────────────── The quarantine data source schema contains the columns of the original row and the following columns with information about the issues that caused the quarantine:
- `c__error_column`   Array(String) contains an array of all the columns that contain an invalid value.
- `c__error`   Array(String) contains an array of all the errors that caused the ingestion to fail and lead to store the values in quarantine. This column along the `c__error_column`   allows you to easily identify which is the columns that has problems and which is the error.
- `c__import_id`   Nullable(String) contains the job's identifier in case the column was imported through a job.
- `insertion_date`   (DateTime) contains the timestamp in which the ingestion was done.
---
URL: https://www.tinybird.co/docs/forward/get-data-in/local-file
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Ingest data from files · Tinybird Docs"
theme-color: "#171612"
description: "Learn how to ingest data from files to Tinybird."
---
# Ingest data from files [¶](https://www.tinybird.co/docs/forward/get-data-in/local-file#ingest-data-from-files)
Copy as MD You can ingest data from files to Tinybird using the [Data sources API](/docs/api-reference/datasource-api) or the [tb datasource](/docs/forward/commands/tb-datasource) CLI command.
## Supported file types [¶](https://www.tinybird.co/docs/forward/get-data-in/local-file#supported-file-types)
Tinybird supports these file types and compression formats at ingest time:
| File type | Method | Accepted extensions | Compression formats supported |
| --- | --- | --- | --- |
| CSV | File upload, URL | `.csv`  , `.csv.gz` | `gzip` |
| NDJSON | File upload, URL, Events API | `.ndjson`  , `.ndjson.gz` | `gzip` |
| Parquet | File upload, URL | `.parquet`  , `.parquet.gz` | `gzip` |
| Avro | Kafka |  | `gzip` |
## Analyze the schema of a file [¶](https://www.tinybird.co/docs/forward/get-data-in/local-file#analyze-the-schema-of-a-file)
Before you upload data from a file or create a data source, you can analyze the scheme of the file. Tinybird infers column names, types, and JSONPaths. This is helpful to identify the most appropriate data types for your columns. See [Data types](/docs/sql-reference/data-types).
The following examples show how to analyze a local CSV file.
- tb datasource
- Analyze API
tb datasource analyze local_file.csv
## Append data from a file [¶](https://www.tinybird.co/docs/forward/get-data-in/local-file#append-data-from-a-file)
You can append data from a local or remote file to a data source in Tinybird Local or Tinybird Cloud.
The following examples show how to append data from a local file to a data source in Tinybird Cloud:
- tb datasource (Local file)
- tb datasource (Remote file)
- Data source API
- Remote file using the API
tb --cloud datasource append <data_source_name> local_file.csv When appending CSV files, you can improve performance by excluding the CSV Header line. However, in this case, make sure the CSV columns are ordered. If you can't guarantee the order of columns in your CSV, include the CSV header.
## Replace data from a file [¶](https://www.tinybird.co/docs/forward/get-data-in/local-file#replace-data-from-a-file)
You can replace existing all data or a selection of data in a data source with the contents of a file. You can replace with data from local or remote files.
The following examples show how to replace data in Tinybird Cloud:
- tb datasource (Local file)
- tb datasource (Remote file)
- Data source API
- Remote file using the API
tb --cloud datasource replace <data_source_name> local_file.csv
## Replace data based on conditions [¶](https://www.tinybird.co/docs/forward/get-data-in/local-file#replace-data-based-on-conditions)
Instead of replacing all data, you can also replace specific partitions of data. To do this, you define an SQL condition that describes the filter that's applied. All matching rows are deleted before finally ingesting the new file. Only the rows matching the condition are ingested.
Replacements are made by partition, so make sure that the condition filters on the partition key of the data source. If the source file contains rows that don't match the filter, the rows are ignored.
The following examples show how to replace partial data using a condition:
- tb datasource (Local file)
- tb datasource (Remote file)
- Data source API
- Remote file using the API
tb --cloud datasource replace <data_source_name> local_file.csv --sql-condition "my_partition_key > 123" All the dependencies of the data source are recalculated so that your data is consistent after the replacement. If you have n-level dependencies, they're also updated by this operation.
Although replacements are atomic, Tinybird can't assure data consistency if you continue appending data to any related data source at the same time the replacement takes place. The new incoming data is discarded.
---
URL: https://www.tinybird.co/docs/forward/get-data-in/events-api
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Send events · Tinybird Docs"
theme-color: "#171612"
description: "Send JSON and NDJSON data to Tinybird Forward by calling the Events API."
---
# Send events [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#send-events)
Copy as MD Use the Events API to send JSON and NDJSON data to Tinybird in a high-throughput streaming way. You can send single events or entire batches of events using Gzip compression. See [Events API reference](/docs/api-reference/events-api).
## Send single JSON events [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#send-single-json-events)
You can send single JSON events to the Events API by including the JSON event in the request body. Supported event formats are JSON and newline delimited JSON (NDJSON).
For example, to send an single NDJSON event using cURL:
##### Sending single NDJSON events
curl \
-H "Authorization: Bearer <your-token>" \
-d '{"date": "2020-04-05 00:05:38", "city": "Chicago"}' \
'https://api.europe-west2.gcp.tinybird.co/v0/events?name=events_test' The `name` parameter defines the name of the data source in which to insert events. To append data to an existing data source, the `DATASOURCE:APPEND` scope is required.
## Send batches of JSON events [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#send-batches-of-json-events)
Sending batches of events helps you achieve much higher total throughput than sending single events. You can send batches of JSON events to the Events API by formatting the events as NDJSON (newline delimited JSON). Each single JSON event must be separated by a newline ( `\n` ) character.
The following example shows how to send a batch of NDJSON events using cURL:
##### Sending batches of JSON events
curl \
-H "Authorization: Bearer <import_token>" \
-d $'{"date": "2020-04-05", "city": "Chicago"}\n{"date": "2020-04-05", "city": "Madrid"}\n' \
'https://api.tinybird.co/v0/events?name=events_test' The `name` parameter defines the name of the data source in which to insert events. To append data to an existing data source, the `DATASOURCE:APPEND` scope is required.
## Limits [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#limits)
The Events API delivers a default capacity of:
- Up to 100 requests per second per data source
- Up to 20 MB per second per data source
- Up to 10 MB per request per data source.
### Rate limit headers [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#rate-limit-headers)
The Events API returns the following headers with the response:
| Header Name | Description |
| --- | --- |
| `X-RateLimit-Limit` | The maximum number of requests you're permitted to make in the current limit window. |
| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |
| `X-RateLimit-Reset` | The time in seconds after the current rate limit window resets. |
| `Retry-After` | The time to wait before making a another request. Only present on 429 responses. |
### Check the payload size [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#check-the-payload-size)
To avoid hitting the request limit size, you can check your payload size before sending. For example:
- shell
- python
- js
echo '{"date": "2020-04-05", "city": "Chicago"}' | wc -c | awk '{print $1/1024/1024 " MB"}'
## Compress the data you send [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#compress-the-data-you-send)
You can compress the data you send to the Events API using Gzip. Compressing events adds overhead to the ingestion process, which can introduce latency, although it's typically minimal.
Here is an example of sending a JSON event compressed with Gzip from the command line:
echo '{"timestamp":"2022-10-27T11:43:02.099Z","transaction_id":"8d1e1533-6071-4b10-9cda-b8429c1c7a67","name":"Bobby Drake","email":"bobby.drake@pressure.io","age":42,"passport_number":3847665,"flight_from":"Barcelona","flight_to":"London","extra_bags":1,"flight_class":"economy","priority_boarding":false,"meal_choice":"vegetarian","seat_number":"15D","airline":"Red Balloon"}' | gzip > body.gz
curl \
-X POST 'https://api.tinybird.co/v0/events?name=gzip_events_example' \
-H "Authorization: Bearer <AUTH_TOKEN>" \
-H "Content-Encoding: gzip" \
--data-binary @body.gz
## Write operation acknowledgements [¶](https://www.tinybird.co/docs/forward/get-data-in/events-api#write-operation-acknowledgements)
When you send data to the Events API, you usually receive an `HTTP202` response, which indicates that the request was successful, although it doesn't confirm that the data has been committed into the underlying database. This is useful when guarantees on writes aren't strictly necessary.
Typically, it takes under two seconds to receive a response from the Events API. For example:
curl \
-X POST 'https://api.tinybird.co/v0/events?name=events_example' \
-H "Authorization: Bearer <AUTH_TOKEN>" \
-d $'{"timestamp":"2022-10-27T11:43:02.099Z"}'
< HTTP/2 202
< content-type: application/json
< content-length: 42
<
{"successful_rows":2,"quarantined_rows":0} If your use case requires absolute guarantees that data is committed, use the `wait` parameter. The `wait` parameter is a boolean that accepts a value of `true` or `false` . A value of `false` is the default behavior, equivalent to omitting the parameter entirely.
Using `wait=true` with your request asks the Events API to wait for acknowledgement that the data you sent has been committed into the underlying database. You then receive an `HTTP200` response that confirms data has been committed.
Adding `wait=true` to your request can result in a slower response time. Use a timeout of at least 10 seconds when waiting for the response. For example:
curl \
-X POST 'https://api.tinybird.co/v0/events?name=events_example&wait=true' \
-H "Authorization: Bearer <AUTH_TOKEN>" \
-d $'{"timestamp":"2022-10-27T11:43:02.099Z"}'
< HTTP/2 200
< content-type: application/json
< content-length: 42
<
{"successful_rows":2,"quarantined_rows":0} Log your requests and responses from and to the Events API. This helps you get visibility into any failures.
---
URL: https://www.tinybird.co/docs/forward/get-data-in/connectors
Content:
---
title: "Connectors (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Connectors let you bring data into Tinybird from a variety of services."
---
# Connectors [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors#connectors)
Copy as MD Connectors are native integrations that let you connect to and ingest data from popular data platforms and services. Connectors provide a managed solution to stream or batch import data into Tinybird.
Each connector is fully managed by Tinybird and requires minimal setup - typically just authentication credentials and basic configuration. They handle the complexities of:
- Authentication and secure connections
- Schema detection and mapping
- Incremental updates and change data capture
- Error handling and monitoring
- Scheduling and orchestration
You can configure connectors using the Tinybird CLI, making it easy to incorporate them into your data workflows and CI/CD pipelines.
## Available connectors [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors#available-connectors)
The following connectors are available:
- [  Kafka](/docs/forward/get-data-in/connectors/kafka)
- [  S3](/docs/forward/get-data-in/connectors/s3)
---
URL: https://www.tinybird.co/docs/forward/datafiles/tinyb-file
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: ".tinyb file · Tinybird Docs"
theme-color: "#171612"
description: "The .tinyb file contains the Tinybird project configuration, including the authentication token."
---
# .tinyb file [¶](https://www.tinybird.co/docs/forward/datafiles/tinyb-file#tinyb-file)
Copy as MD The `.tinyb` file is a configuration file that contains the Tinybird project configuration, including the authentication token obtained by running `tb login`.
Running commands requires a valid `.tinyb` file in the root of your project. If you don't have one, you can create one by running [tb auth](/docs/forward/commands/tb-auth) or [tb login](/docs/forward/commands/tb-login).
## Location [¶](https://www.tinybird.co/docs/forward/datafiles/tinyb-file#location)
You can place the `.tinyb` file in the root of your app repository or keep it together with your Tinybird datafiles. Tinybird looks for the `.tinyb` file in all parent folders till it reaches the home directory.
## File structure [¶](https://www.tinybird.co/docs/forward/datafiles/tinyb-file#file-structure)
The following is a sample `.tinyb` file:
##### Sample .tinyb file
{
"host": "<tinybird-host>",
"id": "<workspace-id>",
"name": "<workspace-name>",
"scope": "user",
"token": "<authentication-token>",
"tokens": {
"<tinybird-host>": "<authentication-token>",
"<another-tinybird-host>": "<authentication-token>"
},
"user_email": "<user-email>",
"user_id": "<user-id>",
"user_token": "<authentication-token>",
"version": "<tinybird-version>"
}
---
URL: https://www.tinybird.co/docs/forward/datafiles/test-files
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Test files · Tinybird Docs"
theme-color: "#171612"
description: "Test files are used to test the API endpoints."
---
# Test files [¶](https://www.tinybird.co/docs/forward/datafiles/test-files#test-files)
Copy as MD Test files describe the tests for the API endpoints. See [Test and deploy](/docs/forward/test-and-deploy/test-your-project#create-a-test-suite).
Test files are stored in the `tests` folder in your project.
## Test file format [¶](https://www.tinybird.co/docs/forward/datafiles/test-files#test-file-format)
Test files are YAML files that contain the tests for the API endpoints.
Test files are structured as YAML arrays. For example:
- name: test_default_parameters
description: 'Test with default parameters: org_id=1, start_date=30 days ago, end_date=now.'
parameters: org_id=1
expected_result: ''
- name: test_custom_org_id
description: Test with a custom organization ID and default date range.
parameters: org_id=42
expected_result: '' Each test is a YAML object with the following fields:
- `name`   : The name of the test.
- `description`   : The description of the test.
- `parameters`   : The query parameters for the endpoint.
- `expected_result`   : The expected result for the test.
- `expected_http_status`   : The expected HTTP status, for example `200`  .
## Create a test file [¶](https://www.tinybird.co/docs/forward/datafiles/test-files#create-a-test-file)
To create a test file, run `tb test create` against an endpoint .pipe file. See [tb test create](/docs/forward/commands/tb-test#tb-test-create).
## Run tests [¶](https://www.tinybird.co/docs/forward/datafiles/test-files#run-tests)
To run tests, run `tb test run` . See [tb test run](/docs/forward/commands/tb-test#tb-test-run).
---
URL: https://www.tinybird.co/docs/forward/datafiles/pipe-files
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Pipe files (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Pipe files describe your Tinybird Forward pipes. Define the type, data source, and other settings."
---
# Pipe files (.pipe) [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#pipe-files-pipe)
Copy as MD Pipe files describe your pipes. You can use .pipe files to define the type, starting node, data source, and other settings of your pipes.
## Nodes [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#nodes)
A node is a container for a single SQL `SELECT` statement. Nodes live within pipes, and you can have many sequential nodes inside the same pipe. They allow you to break your query logic down into multiple smaller queries. You can then chain nodes together to build the logic incrementally.
A query in a node can read data from a data source, other nodes inside the same pipe, or from endpoint nodes in other pipes. Each node can be developed and tested individually. This makes it much easier to build complex query logic in Tinybird as you avoid creating large monolithic queries with many subqueries.
## Available instructions [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#available-instructions)
The following instructions are available for .pipe files.
| Instruction | Required | Description |
| --- | --- | --- |
| `%` | No | Use as the first character of a node to indicate the node uses the[  templating system](/docs/forward/commands/template-functions)  . |
| `DESCRIPTION <markdown_string>` | No | Sets the description for a node or the complete file. |
| `TAGS <tag_names>` | No | Comma-separated list of tags. |
| `NODE <node_name>` | Yes | Starts the definition of a new node. All the instructions until a new `NODE`   instruction or the end of the file are related to this node. |
| `SQL <sql>` | Yes | Defines a block for the SQL of a node. The block must be indented. |
| `TYPE <pipe_type>` | No | Sets the type of the pipe. Valid values are `ENDPOINT`  , `MATERIALIZED`  , `COPY`   , or `SINK`  . |
| `DATASOURCE <data_source_name>` | Yes | Required when `TYPE`   is `MATERIALIZED`   . Sets the destination data source for materialized nodes. |
| `TARGET_DATASOURCE <data_source_name>` | Yes | Required when `TYPE`   is `COPY`   . Sets the destination data source for copy nodes. |
| `TOKEN <token_name> READ` | No | Grants read access to a pipe or endpoint to the token named <token_name>. If the token isn't specified or <token_name> doesn't exist, it will be automatically created. |
| `COPY_SCHEDULE` | No | Cron expression with the frequency to run copy jobs. Must be higher than 5 minutes. For example, `*/5 * * * *`   . If undefined, it defaults to `@on-demand`  . |
| `COPY_MODE` | No | Strategy to ingest data for copy jobs. One of `append`   or `replace`   . If empty, the default strategy is `append`  . |
## Materialized pipes [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#materialized-pipes)
In a .pipe file you can define how to materialize each row ingested in the earliest data source in the pipe query to a materialized data source. Materialization happens at ingest.
The following example shows how to describe a materialized pipe.
##### tinybird/pipes/sales_by_hour_mv.pipe
DESCRIPTION Materialized pipe to aggregate sales per hour in the sales_by_hour data source
NODE daily_sales
SQL >
SELECT toStartOfDay(starting_date) day, country, sum(sales) as total_sales
FROM teams
GROUP BY day, country
TYPE MATERIALIZED
DATASOURCE sales_by_hour
## Copy pipes [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#copy-pipes)
In a .pipe file you can define how to export the result of a pipe to a data source, optionally with a schedule.
The following example shows how to describe a Copy pipe.
##### tinybird/pipes/sales_by_hour_cp.pipe
DESCRIPTION Copy pipe to export sales hour every hour to the sales_hour_copy data source
NODE daily_sales
SQL >
%
SELECT toStartOfDay(starting_date) day, country, sum(sales) as total_sales
FROM teams
WHERE
day BETWEEN toStartOfDay(now()) - interval 1 day AND toStartOfDay(now())
and country = {{ String(country, 'US')}}
GROUP BY day, country
TYPE COPY
TARGET_DATASOURCE sales_hour_copy
COPY_SCHEDULE 0 * * * *
## Endpoint pipes [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#endpoint-pipes)
In a .pipe file you can define how to export the result of a pipe as an HTTP endpoint.
The following example shows how to describe an endpoint pipe. See [Endpoints](/docs/forward/publish-your-data/api-endpoints).
##### tinybird/pipes/sales_by_hour_endpoint.pipe
TOKEN dashboard READ
DESCRIPTION endpoint to get sales by hour filtering by date and country
TAGS sales
NODE daily_sales
SQL >
%
SELECT day, country, sum(total_sales) as total_sales
FROM sales_by_hour
WHERE
day BETWEEN toStartOfDay(now()) - interval 1 day AND toStartOfDay(now())
and country = {{ String(country, 'US')}}
GROUP BY day, country
NODE result
SQL >
%
SELECT * FROM daily_sales
LIMIT {{Int32(page_size, 100)}}
OFFSET {{Int32(page, 0) * Int32(page_size, 100)}}
TYPE ENDPOINT
## Sink pipes [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#sink-pipes)
The following parameters are available when defining sink pipes:
| Instruction | Required | Description |
| --- | --- | --- |
| `EXPORT_SERVICE` | Yes | One of `gcs_hmac`  , `s3`  , `s3_iamrole`   , or `kafka`  . |
| `EXPORT_CONNECTION_NAME` | Yes | The name of the export connection. |
| `EXPORT_SCHEDULE` | No | Cron expression, in UTC time. Must be higher than 5 minutes. For example, `*/5 * * * *`  . |
### Blob storage sinks [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#blob-storage-sinks)
When setting `EXPORT_SERVICE` as one of `gcs_hmac`, `s3` , or `s3_iamrole` , you can use the following instructions:
| Instruction | Required | Description |
| --- | --- | --- |
| `EXPORT_BUCKET_URI` | Yes | The desired bucket path for the exported file. Path must not include the filename and extension. |
| `EXPORT_FILE_TEMPLATE` | Yes | Template string that specifies the naming convention for exported files. The template can include dynamic attributes between curly braces based on columns' data that will be replaced with real values when exporting. For example: `export_{category}{date,'%Y'}{2}`  . |
| `EXPORT_FORMAT` | Yes | Format in which the data is exported. The default value is `csv`  . |
| `EXPORT_COMPRESSION` | No | Compression file type. Accepted values are `none`  , `gz`   for gzip, `br`   for brotli, `xz`   for LZMA, `zst`   for zstd. Default values is `none`  . |
| `EXPORT_STRATEGY` | Yes | One of the available strategies. The default is `@new`  . |
### Kafka sinks [¶](https://www.tinybird.co/docs/forward/datafiles/pipe-files#kafka-sinks)
Kafka sinks are currently in private beta. If you have any feedback or suggestions, contact Tinybird at [support@tinybird.co](mailto:support@tinybird.co) or in the [Slack](/docs/community).
When setting `EXPORT_SERVICE` as `kafka` , you can use the following instructions:
| Instruction | Required | Description |
| --- | --- | --- |
| `EXPORT_KAFKA_TOPIC` | Yes | The desired topic for the export data. |
---
URL: https://www.tinybird.co/docs/forward/datafiles/datasource-files
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Datasource files (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Datasource files describe your data sources. Define the schema, engine, and other settings."
---
# Datasource files (.datasource) [¶](https://www.tinybird.co/docs/forward/datafiles/datasource-files#datasource-files-datasource)
Copy as MD Datasource files describe your data sources. You can use .datasource files to define the schema, engine, and other settings of your data sources.
## Available instructions [¶](https://www.tinybird.co/docs/forward/datafiles/datasource-files#available-instructions)
The following instructions are available for .datasource files.
| Declaration | Required | Description |
| --- | --- | --- |
| `SCHEMA <indented_schema_definition>` | Yes | Defines a block for a Data Source schema. The block must be indented. |
| `ENGINE <engine_type>` | No | Sets the engine for Data Source. Default value is `MergeTree`  . |
| `ENGINE_SORTING_KEY <sql>` | No | Sets the `ORDER BY`   expression for the Data Source. If unset, it defaults to DateTime, numeric, or String columns, in that order. |
| `ENGINE_PARTITION_KEY <sql>` | No | Sets the `PARTITION`   expression for the Data Source. |
| `ENGINE_TTL <sql>` | No | Sets the `TTL`   expression for the Data Source. |
| `ENGINE_VER <column_name>` | No | Column with the version of the object state. Required when using `ENGINE ReplacingMergeTree`  . |
| `ENGINE_SIGN <column_name>` | No | Column to compute the state. Required when using `ENGINE CollapsingMergeTree`   or `ENGINE VersionedCollapsingMergeTree`  . |
| `ENGINE_VERSION <column_name>` | No | Column with the version of the object state. Required when `ENGINE VersionedCollapsingMergeTree`  . |
| `ENGINE_SETTINGS <settings>` | No | Comma-separated list of key-value pairs that describe engine settings for the Data Source. |
| `FORWARD_QUERY <sql>` | No | Defines a query to execute on the Data Source. The results of the query are returned instead of the original schema defined in the `SCHEMA`   declaration. See[  Evolve data sources](/docs/forward/test-and-deploy/evolve-data-source#forward-query)  . |
| `TOKEN <token_name> READ|APPEND` | No | Grants read or append access to a datasource to the token named <token_name>. If the token isn't specified or <token_name> doesn't exist, it will be automatically created. |
The following example shows a typical .datasource file:
##### tinybird/datasources/example.datasource
# A comment
SCHEMA >
`timestamp` DateTime `json:$.timestamp`,
`session_id` String `json:$.session_id`,
`action` LowCardinality(String) `json:$.action`,
`version` LowCardinality(String) `json:$.version`,
`payload` String `json:$.payload`
ENGINE "MergeTree"
ENGINE_PARTITION_KEY "toYYYYMM(timestamp)"
ENGINE_SORTING_KEY "timestamp"
ENGINE_TTL "timestamp + toIntervalDay(60)"
ENGINE_SETTINGS "index_granularity=8192"
### Schema [¶](https://www.tinybird.co/docs/forward/datafiles/datasource-files#schema)
A `SCHEMA` declaration is a newline, comma-separated list of columns definitions. For example:
##### Example SCHEMA declaration
SCHEMA >
`timestamp` DateTime `json:$.timestamp`,
`session_id` String `json:$.session_id`,
`action` LowCardinality(String) `json:$.action`,
`version` LowCardinality(String) `json:$.version`,
`payload` String `json:$.payload` Each column in a `SCHEMA` declaration is in the format `<column_name> <data_type> <json_path> <default_value>` , where:
- `<column_name>`   is the name of the column in the Data Source.
- `<data_type>`   is one of the supported[  Data types](/docs/sql-reference/data-types)  .
- `<json_path>`   is optional and only required for NDJSON data sources.
- `<default_value>`   sets a default value to the column when it's null. A common use case is to set a default date to a column, like `updated_at DateTime DEFAULT now()`  .
### JSONPath expressions [¶](https://www.tinybird.co/docs/forward/datafiles/datasource-files#jsonpath-expressions)
`SCHEMA` definitions support JSONPath expressions. For example:
##### Schema syntax with jsonpath
DESCRIPTION Generated from /Users/username/tmp/sample.ndjson
SCHEMA >
`d` DateTime `json:$.d`,
`total` Int32 `json:$.total`,
`from_novoa` Int16 `json:$.from_novoa`
### Engine settings [¶](https://www.tinybird.co/docs/forward/datafiles/datasource-files#engine-settings)
`ENGINE` declares the engine used for the Data Source. The default value is `MergeTree`.
See [Engines](/docs/sql-reference/engines) for more information.
### Connector settings [¶](https://www.tinybird.co/docs/forward/datafiles/datasource-files#connector-settings)
A data source file can contain connector settings for certain type of sources, such as Kafka or S3. See [Connectors](/docs/forward/get-data-in/connectors).
## Forward query [¶](https://www.tinybird.co/docs/forward/datafiles/datasource-files#forward-query)
If you make changes to a .datasource file that are incompatible with the live version, you must use the `FORWARD_QUERY` instruction to transform the data from the live schema to the new one. Otherwise, your deployment will fail due to a schema mismatch.
See [Evolve data sources](/docs/forward/test-and-deploy/evolve-data-source#forward-query) for more information.
---
URL: https://www.tinybird.co/docs/forward/datafiles/connection-files
Last update: 2025-03-21T14:06:38.000Z
Content:
---
title: "Connection files · Tinybird Docs"
theme-color: "#171612"
description: "Connection files describe your data connections. They're used by Tinybird connectors."
---
# Connection files (.connection) [¶](https://www.tinybird.co/docs/forward/datafiles/connection-files#connection-files-connection)
Copy as MD Connection files describe your data connections. They're used by Tinybird connectors to establish a connection when deploying to live environments. See [Connectors](/docs/forward/get-data-in/connectors).
Connection files bear the .connection extension and are stored in the connections folder of your project. See [Datafiles](/docs/forward/datafiles).
Connection files are not active in the [Development environment](/docs/forward/get-started/environments) . When using `tb dev` , connections to external services like Kafka or S3 will not be checked or ingest any data. Connections only become active after deploying to Local or Cloud environments.
## Structure [¶](https://www.tinybird.co/docs/forward/datafiles/connection-files#structure)
All .connection file contains a `TYPE` declaration that specifies the type of connection. For each connection type, a number of settings are mandatory.
The name of the .connection file determines the name used in .datasource files when defining the connection.
The following example shows a .connection file for a Kafka data source:
##### kafkasample.connection
TYPE kafka
KAFKA_BOOTSTRAP_SERVERS {{ tb_secret("PRODUCTION_KAFKA_SERVERS", "localhost:9092") }}
KAFKA_SECURITY_PROTOCOL SASL_SSL
KAFKA_SASL_MECHANISM PLAIN
KAFKA_KEY {{ tb_secret("PRODUCTION_KAFKA_USERNAME", "") }}
KAFKA_SECRET {{ tb_secret("PRODUCTION_KAFKA_PASSWORD", "") }} The calls to the `tb_secret` function contain the name of the secret and a default value. See [tb secret](/docs/forward/commands/tb-secret) to learn how to set and manage secrets.
Never add credentials as plain text in your datafiles. Use secrets instead.
## List your connections [¶](https://www.tinybird.co/docs/forward/datafiles/connection-files#list-your-connections)
To list your connections, run the [tb connections](/docs/forward/commands/tb-connection) command:
tb connection ls
## Update a connection [¶](https://www.tinybird.co/docs/forward/datafiles/connection-files#update-a-connection)
To update or refresh a connection after changing settings or secrets, redeploy your project. See [Deployments](/docs/forward/test-and-deploy/deployments) . Connections remain active using the previous settings until you deploy them again.
---
URL: https://www.tinybird.co/docs/forward/commands/template-functions
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Template functions (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Template functions available in Tinybird datafiles."
---
# Template functions [¶](https://www.tinybird.co/docs/forward/commands/template-functions#template-functions)
Copy as MD The following template functions are available. You can use them in [datafiles](/docs/forward/datafiles) to accomplish different tasks.
## defined [¶](https://www.tinybird.co/docs/forward/commands/template-functions#defined)
Checks whether a variable is defined.
##### defined function
%
SELECT
date
FROM my_table
{% if defined(param) %}
WHERE ...
{% end %}
## column [¶](https://www.tinybird.co/docs/forward/commands/template-functions#column)
Retrieves the column by its name from a variable.
##### column function
%
{% set var_1 = 'name' %}
SELECT
{{column(var_1)}}
FROM my_table
## columns [¶](https://www.tinybird.co/docs/forward/commands/template-functions#columns)
Retrieves columns by their name from a variable.
##### columns function
%
{% set var_1 = 'name,age,address' %}
SELECT
{{columns(var_1)}}
FROM my_table
## date_diff_in_seconds [¶](https://www.tinybird.co/docs/forward/commands/template-functions#date-diff-in-seconds)
Returns the absolute value of the difference in seconds between two `DateTime` . See [DateTime](/docs/sql-reference/data-types/datetime).
The function accepts the following parameters:
- `date_1`   : the first date or DateTime.
- `date_2`   : the second date or DateTime.
- `date_format`   : (optional) the format of the dates. Defaults to `'%Y-%m-%d %H:%M:%S'`   , so you can pass `DateTime`   as `YYYY-MM-DD hh:mm:ss`   when calling the function.
- `backup_date_format`   : (optional) the format of the dates if the first format doesn't match. Use it when your default input format is a DateTime ( `2022-12-19 18:42:22`   ) but you receive a date instead ( `2022-12-19`   ).
- `none_if_error`   : (optional) whether to return `None`   if the dates don't match the provided formats. Defaults to `False`   . Use it to provide an alternate logic in case any of the dates are specified in a different format.
An example of how to use the function:
date_diff_in_seconds('2022-12-19T18:42:23.521Z', '2022-12-19T18:42:23.531Z', date_format='%Y-%m-%dT%H:%M:%S.%fz') The following example shows how to use the function in a datafile:
##### date_diff_in_seconds function
%
SELECT
date, events
{% if date_diff_in_seconds(date_end, date_start, date_format="%Y-%m-%dT%H:%M:%Sz") < 3600 %}
FROM my_table_raw
{% else %}
FROM my_table_hourly_agg
{% end %}
WHERE date BETWEEN
parseDateTimeBestEffort({{String(date_start,'2023-01-11T12:24:04Z')}})
AND
parseDateTimeBestEffort({{String(date_end,'2023-01-11T12:24:05Z')}}) See [working with time](/docs/work-with-data/query/guides/working-with-time) for more information on how to work with time in Tinybird.
## date_diff_in_minutes [¶](https://www.tinybird.co/docs/forward/commands/template-functions#date-diff-in-minutes)
Same behavior as [date_diff_in_seconds](https://www.tinybird.co/docs/forward/commands/template-functions#date_diff_in_seconds) , but returns the difference in minutes.
## date_diff_in_hours [¶](https://www.tinybird.co/docs/forward/commands/template-functions#date-diff-in-hours)
Same behavior as [date_diff_in_seconds](https://www.tinybird.co/docs/forward/commands/template-functions#date_diff_in_seconds) , but returns the difference in hours.
## date_diff_in_days [¶](https://www.tinybird.co/docs/forward/commands/template-functions#date-diff-in-days)
Returns the absolute value of the difference in days between two dates or DateTime.
##### date_diff_in_days function
%
SELECT
date
FROM my_table
{% if date_diff_in_days(date_end, date_start) < 7 %}
WHERE ...
{% end %} `date_format` is optional and defaults to `'%Y-%m-%d` , so you can pass DateTime as `YYYY-MM-DD` when calling the function.
As with `date_diff_in_seconds`, `date_diff_in_minutes` , and `date_diff_in_hours` , other [date_formats](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes) are supported.
## split_to_array [¶](https://www.tinybird.co/docs/forward/commands/template-functions#split-to-array)
Splits comma separated values into an array. The function accepts the following parameters:
`split_to_array(arr, default, separator=',')`
- `arr`   : the value to split.
- `default`   : the default value to use if `arr`   is empty.
- `separator`   : the separator to use. Defaults to `,`  .
The following example splits `code` into an array of integers:
##### split_to_array function
%
SELECT
arrayJoin(arrayMap(x -> toInt32(x), {{split_to_array(code, '')}})) as codes
FROM my_table The following example splits `param` into an array of strings using `|` as the custom separator:
##### split_to_array with a custom separator function
%
SELECT
{{split_to_array(String(param, 'hi, how are you|fine thanks'), separator='|')}}
## enumerate_with_last [¶](https://www.tinybird.co/docs/forward/commands/template-functions#enumerate-with-last)
Creates an iterable array, returning a boolean value that allows to check if the current element is the last element in the array. You can use it alongside the [split_to_array function](https://www.tinybird.co/docs/forward/commands/template-functions#split_to_array).
## symbol [¶](https://www.tinybird.co/docs/forward/commands/template-functions#symbol)
Retrieves the value of a variable. The function accepts the following parameters:
`symbol(x, quote)`
For example:
##### enumerate_with_last function
%
SELECT
{% for _last, _x in enumerate_with_last(split_to_array(attr, 'amount')) %}
sum({{symbol(_x)}}) as {{symbol(_x)}}
{% if not _last %}, {% end %}
{% end %}
FROM my_table
## sql_and [¶](https://www.tinybird.co/docs/forward/commands/template-functions#sql-and)
Creates a list of "WHERE" clauses, along with "AND" separated filters, that checks if a field (<column>) is or isn't (<op>) in a list/tuple (<transform_type_function>).
The function accepts the following parameters:
`sql_and(<column>__<op>=<transform_type_function> [, ...] )`
- `<column>`   : any column in the table.
- `<op>`   : one of: `in`  , `not_in`  , `gt`   (>), `lt`   (<), `gte`   (>=), `lte`   (<=)
- `<transform_type_function>`   : any of the transform type functions ( `Array(param, 'Int8')`  , `String(param)`   , etc.). If one parameter isn't specified, then the filter is ignored.
For example:
##### sql_and function
%
SELECT *
FROM my_table
WHERE 1
{% if defined(param) or defined(param2_not_in) %}
AND {{sql_and(
param__in=Array(param, 'Int32', defined=False),
param2__not_in=Array(param2_not_in, 'String', defined=False))}}
{% end %} If this is queried with `param=1,2` and `param2_not_in=ab,bc,cd` , it translates to:
##### sql_and function - generated sql
SELECT *
FROM my_table
WHERE 1
AND param  IN [1,2]
AND param2 NOT IN ['ab','bc','cd'] If this is queried with `param=1,2` only, but `param2_not_in` isn't specified, it translates to:
##### sql_and function - generated sql param missing
SELECT *
FROM my_table
WHERE 1
AND param  IN [1,2]
## Transform types functions [¶](https://www.tinybird.co/docs/forward/commands/template-functions#transform-types-functions)
The following functions validate the type of a template variable and cast it to the desired data type. They also provide a default value if no value is passed.
- `Boolean(x)`
- `DateTime64(x)`
- `DateTime(x)`
- `Date(x)`
- `Float32(x)`
- `Float64(x)`
- `Int8(x)`
- `Int16(x)`
- `Int32(x)`
- `Int64(x)`
- `Int128(x)`
- `Int256(x)`
- `UInt8(x)`
- `UInt16(x)`
- `UInt32(x)`
- `UInt64(x)`
- `UInt128(x)`
- `UInt256(x)`
- `String(x)`
- `Array(x)`
Each function accepts the following parameters:
`type(x, default, description=<description>, required=<true|false>)`
- `x`   : the parameter or value.
- `default`   : (optional) the default value to use if `x`   is empty.
- `description`   : (optional) the description of the value.
- `required`   : (optional) whether the value is required.
For example, `Int32` in the following query, `lim` is the parameter to be cast to an `Int32`, `10` is the default value, and so on:
##### transform_type_functions
%
SELECT * FROM TR LIMIT {{Int32(lim, 10, description="Limit the number of rows in the response", required=False)}}
---
URL: https://www.tinybird.co/docs/forward/commands/tb-workspace
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb workspace (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Manage your Tinybird Forward workspaces"
---
# tb workspace [¶](https://www.tinybird.co/docs/forward/commands/tb-workspace#tb-workspace)
Copy as MD Manage your workspaces. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| create [OPTIONS] WORKSPACE_NAME | Creates a new workspace for your Tinybird user. |
| current | Shows the workspace you're currently authenticated to. |
| delete [OPTIONS] WORKSPACE_NAME_OR_ID | Deletes a workspace where you are an admin. |
| ls | Lists all the workspaces you have access to in the account you're currently authenticated to. |
| members add [OPTIONS] MEMBERS_EMAILS | Adds members to the current workspace. |
| members ls [OPTIONS] | Lists members in the current workspace. |
| members rm [OPTIONS] | Removes members from the current workspace. |
| members set-role [OPTIONS] [guest|viewer|admin] MEMBERS_EMAILS | Sets the role for existing workspace members. |
| use WORKSPACE_NAME_OR_ID | Switches to another workspace. Use `tb workspace ls`   to list the workspaces you have access to. |
## tb workspace create [¶](https://www.tinybird.co/docs/forward/commands/tb-workspace#tb-workspace-create)
Creates a new workspace for your Tinybird user.
| Option | Description |
| --- | --- |
| --starter_kit URL | Uses a Tinybird starter kit as a template. |
| --fork | When enabled, Tinybird shares all data sources from the current workspace to the new one. |
| --user_token TEXT | When passed, Tinybird won't prompt asking for it. |
## tb workspace delete [¶](https://www.tinybird.co/docs/forward/commands/tb-workspace#tb-workspace-delete)
Deletes a workspace where you are an admin.
| Option | Description |
| --- | --- |
| --user_token TEXT | When passed, Tinybird won't prompt asking for it. |
| --yes | Don't ask for confirmation. |
## tb workspace members add [¶](https://www.tinybird.co/docs/forward/commands/tb-workspace#tb-workspace-members-add)
Adds members to the current workspace. Takes a list of members emails as an argument.
| Option | Description |
| --- | --- |
| --role [guest|viewer|admin] | Sets the role for the members. |
| --user_token TEXT | When passed, Tinybird won't prompt asking for it. |
## tb workspace members rm [¶](https://www.tinybird.co/docs/forward/commands/tb-workspace#tb-workspace-members-rm)
Removes members from the current workspace. Takes a list of members emails as an argument.
| Option | Description |
| --- | --- |
| --user_token TEXT | When passed, Tinybird won't prompt asking for it. |
## tb workspace members set-role [¶](https://www.tinybird.co/docs/forward/commands/tb-workspace#tb-workspace-members-set-role)
Sets the role for existing workspace members.
| Option | Description |
| --- | --- |
| --user_token TEXT | When passed, Tinybird won't prompt asking for it. |
## tb workspace use [¶](https://www.tinybird.co/docs/forward/commands/tb-workspace#tb-workspace-use)
Switches to another workspace. Use `tb workspace ls` to list the workspaces you have access to.
| Option | Description |
| --- | --- |
| --user_token TEXT | When passed, Tinybird won't prompt asking for it. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-update
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb update · Tinybird Docs"
theme-color: "#171612"
description: "Update the Tinybird Forward CLI to the latest version"
---
# tb update [¶](https://www.tinybird.co/docs/forward/commands/tb-update#tb-update)
Copy as MD Updates the CLI to the latest version. Requires `tb local start`.
tb update
» Updating Tinybird CLI...
✓ Tinybird CLI updated If you can't update for some reason, manually reinstall the CLI:
curl https://tinybird.co | sh
---
URL: https://www.tinybird.co/docs/forward/commands/tb-token
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb token (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Create and manage your workspace tokens."
---
# tb token [¶](https://www.tinybird.co/docs/forward/commands/tb-token#tb-token)
Copy as MD Manage your workspace tokens. See [Authentication](/docs/forward/get-started/authentication).
| Command | Description |
| --- | --- |
| copy OPTIONS TOKEN_ID | Copies a token. |
| ls OPTIONS | Lists tokens. Use `--match TEXT`   to retrieve any token matching the pattern. For example, `--match _test`  . |
| refresh OPTIONS TOKEN_ID | Refreshes a token. Adding `--yes`   removes the need for confirmation. |
| rm OPTIONS TOKEN_ID | Removes a token. Adding `--yes`   removes the need for confirmation. |
| scopes OPTIONS TOKEN_ID | Lists token scopes. |
| create static OPTIONS TOKEN_NAME | Creates a static token that lasts forever. If a token with the same name already exists, it updates it. |
| create jwt OPTIONS TOKEN_NAME | Creates a JWT token with a fixed expiration time. |
## tb token create static [¶](https://www.tinybird.co/docs/forward/commands/tb-token#tb-token-create-static)
Creates a static token. Note that resource-scoped tokens are automatically generated.
For example:
tb token create static my_static_token --scope ORG_DATASOURCES:READ The following options are available:
| Option | Description |
| --- | --- |
| --scope | Scope for the token, for example `DATASOURCES:READ`   . Required. |
| --resource | Resource you want to associate the scope with. |
| --filter | SQL condition used to filter the values when calling with this token. For example, `--filter=value > 0`  . |
## tb token create jwt [¶](https://www.tinybird.co/docs/forward/commands/tb-token#tb-token-create-jwt)
Creates a JWT token.
For example:
tb token create jwt my_jwt --ttl 1h --scope PIPES:READ --resource my_pipe --filters "column_name=value" The following options are available:
| Option | Description |
| --- | --- |
| --ttl | Time to live. For example, `1h`  , `30min`  , `1d`   . Required. |
| --scope | Scope for the token. Only `PIPES:READ`   is allowed for JWT tokens. Required. |
| --resource | Resource you want to associate the scope with. Required |
| --fixed-params | Fixed parameters in `key=value`   format. You can separate multiple values using commas. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-test
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb test · Tinybird Docs"
theme-color: "#171612"
description: "Generate and run tests for your Tinybird Forward project"
---
# tb test [¶](https://www.tinybird.co/docs/forward/commands/tb-test#tb-test)
Copy as MD Generates and runs tests. The following subcommands are available:
| Command | Description |
| --- | --- |
| create [OPTIONS] | Creates a test in YAML format from a pipe datafile. |
| run [FILES] | Runs all the tests in the project or specific tests passed as arguments. |
| update [FILES] | Updates the test's expectations. |
## tb test create [¶](https://www.tinybird.co/docs/forward/commands/tb-test#tb-test-create)
Creates a test in YAML format from an API endpoint.
For example: `tb test create api_events --prompt "test for the customer id 42 and the event type 'purchase'"`.
| Option | Description |
| --- | --- |
| --prompt TEXT | Passes a prompt to generate a customized test. |
Tests are stored in the `tests` folder in your project as YAML files. For a description of the test file format, see [Test files](/docs/forward/datafiles/test-files).
## tb test run [¶](https://www.tinybird.co/docs/forward/commands/tb-test#tb-test-run)
Runs all the tests in the project `tb test run` or specific tests passed as arguments. For example: `tb test tests/run api_events.yaml`.
## tb test update [¶](https://www.tinybird.co/docs/forward/commands/tb-test#tb-test-update)
Updates the test's expectations. For example: `tb test update api_events`.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-sql
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb sql (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Run SQL queries over data sources and pipes"
---
# tb sql [¶](https://www.tinybird.co/docs/forward/commands/tb-sql#tb-sql)
Copy as MD Run SQL query over data sources and pipes. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
## Options [¶](https://www.tinybird.co/docs/forward/commands/tb-sql#options)
| Option | Description |
| --- | --- |
| --rows_limit INTEGER | Max number of rows retrieved. |
| --pipeline TEXT | The name of the pipe to run the SQL Query. |
| --pipe TEXT | The path to the .pipe file to run the SQL Query of a specific NODE. |
| --node TEXT | The NODE name. |
| --format [json|csv|human] | Output format. |
| --stats / --no-stats | Shows query stats. |
## Examples [¶](https://www.tinybird.co/docs/forward/commands/tb-sql#examples)
The following example shows how to run a SELECT statement with count:
tb sql "SELECT count(*) from tinybird.endpoint_errors"
Running against Tinybird Local
count()
UInt64
───────────
0 The following example shows how to use the `--rows_limit` and `--stats` options:
tb sql --rows_limit 5 --stats "SELECT start_datetime, duration, pipe_name from tinybird.pipe_stats_rt"
Running against Tinybird Local
** Query took 0.004044331 seconds
** Rows read: 142
** Bytes read: 10.12 KB
start_datetime            duration   pipe_name
DateTime                   Float32   String
──────────────────────────────────────────────────
2025-03-12 16:07:16     0.05388069   query_api
──────────────────────────────────────────────────
2025-03-12 16:07:27   0.0040593147   query_api
──────────────────────────────────────────────────
2025-03-12 16:09:03    0.026257038   query_api
──────────────────────────────────────────────────
2025-03-12 16:15:27     0.03177452   query_api
──────────────────────────────────────────────────
2025-03-12 16:15:33    0.010550499   query_api
---
URL: https://www.tinybird.co/docs/forward/commands/tb-secret
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb secret · Tinybird Docs"
theme-color: "#171612"
description: "Manage secrets in datafiles."
---
# tb secret [¶](https://www.tinybird.co/docs/forward/commands/tb-secret#tb-secret)
Copy as MD Manage secrets in datafiles, like connection credentials. Secrets consists of a name and a value.
You can add a secret with any value like this:
tb --cloud secret set POTATO 12345 You can then use the secret from within a datafile. For example:
TYPE kafka
KAFKA_KEY {{ tb_secret("POTATO", "") }} Note that the first field is the name of the secret, and the second is the default value.
Secrets replacements happen at parsing time in the server. If you change a secret after doing a deployment, you might need to do an additional deployment.
## Subcommands [¶](https://www.tinybird.co/docs/forward/commands/tb-secret#subcommands)
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| ls | Lists all secrets in the project. |
| rm NAME | Deletes a secret. |
| set NAME VALUE | Creates or updates a secret. |
## tb secret ls [¶](https://www.tinybird.co/docs/forward/commands/tb-secret#tb-secret-ls)
Lists secrets.
| Option | Description |
| --- | --- |
| --match TEXT | Retrieves any resource matching the pattern. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-pipe
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb pipe · Tinybird Docs"
theme-color: "#171612"
description: "Manage your Tinybird Forward pipes."
---
# tb pipe [¶](https://www.tinybird.co/docs/forward/commands/tb-pipe#tb-pipe)
Copy as MD Manage your pipes. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| ls | Lists all the pipes you have access to. |
## tb pipe ls [¶](https://www.tinybird.co/docs/forward/commands/tb-pipe#tb-pipe-ls)
Lists all the pipes you have access to.
| Option | Description |
| --- | --- |
| --match TEXT | Retrieves any resource matching the pattern. For example, `--match _test`  . |
| --format [json] | Returns the results in the specified format. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-open
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb open · Tinybird Docs"
theme-color: "#171612"
description: "Open a Tinybird Forward workspace in your browser."
---
# tb open [¶](https://www.tinybird.co/docs/forward/commands/tb-open#tb-open)
Copy as MD Opens a workspace in Tinybird Cloud. You can get your current workspace by running `tb workspace current` . Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
For example:
# Opens the current workspace
tb open
# Opens a specific workspace in the cloud environment
tb --cloud open --workspace someworkspace The following options are available:
| Option | Description |
| --- | --- |
| --workspace | Sets the workspace you want to open. If unset, your current workspace is used. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-mock
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb mock · Tinybird Docs"
theme-color: "#171612"
description: "Generate sample data for your Tinybird project"
---
# tb mock [¶](https://www.tinybird.co/docs/forward/commands/tb-mock#tb-mock)
Copy as MD Generates sample data in `/fixtures` . The command accepts a data source name as an argument and can be used against Tinybird Local and Tinybird Cloud. For example: `tb --cloud mock events`
Use the `--prompt` flag to add more context to the data that is generated. For example: `tb mock user_actions --prompt "Create mock data for 23 users from the US"`.
To use the fixture data in your project, use `tb test` . See [tb test](/docs/forward/commands/tb-test) for more information.
## Options [¶](https://www.tinybird.co/docs/forward/commands/tb-mock#options)
| Option | Description |
| --- | --- |
| --rows INTEGER | Number of rows to generate. |
| --prompt TEXT | Extra context to use for data generation. |
The `tb mock` command saves the SQL query used to generate the data inside the `/fixtures` directory. You can edit the SQL query file to generate different data.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-materialization
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb materialization (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Manage materialized views in your Tinybird Forward project"
---
# tb materialization [¶](https://www.tinybird.co/docs/forward/commands/tb-materialization#tb-materialization)
Copy as MD Manage materialized views. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| ls | Lists materialized views. |
| populate | Populates a materialized view. |
## tb materialization ls [¶](https://www.tinybird.co/docs/forward/commands/tb-materialization#tb-materialization-ls)
Lists materialized views.
| Option | Description |
| --- | --- |
| --match TEXT | Retrieves any resource matching the pattern. |
| --format [json] | Returns the results in the specified format. |
## tb materialization populate [¶](https://www.tinybird.co/docs/forward/commands/tb-materialization#tb-materialization-populate)
Populates a materialized view.
| Option | Description |
| --- | --- |
| --node TEXT | Name of the materialized node. |
| --sql-condition TEXT | Populates with a SQL condition to be applied to the trigger data source of the Materialized View. For instance, `--sql-condition='date == toYYYYMM(now())'`   populates taking all the rows from the trigger data source where `date`   is the current month. Use it together with `--populate`  . |
| --truncate | Truncates the materialized data source before populating it. |
| --unlink-on-populate-error | If the populate job fails the materialized view is unlinked and new data won't be ingested in the materialized view. First time a populate job fails, the materialized view is always unlinked. |
| --wait | Waits for populate jobs to finish, showing a progress bar. Disabled by default. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-logout
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb logout · Tinybird Docs"
theme-color: "#171612"
description: "Log out of Tinybird"
---
# tb logout [¶](https://www.tinybird.co/docs/forward/commands/tb-logout#tb-logout)
Copy as MD Logs you out of your Tinybird session in the project directory you're in.
tb logout
» Logging out from <workspace>...
✓ Logged out! Logging out erases all the credentials stored in the `.tinyb` file. See [.tinyb](/docs/forward/datafiles/tinyb-file).
To log back in, run `tb login`.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-login
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb login · Tinybird Docs"
theme-color: "#171612"
description: "Authenticate with your Tinybird account"
---
# tb login [¶](https://www.tinybird.co/docs/forward/commands/tb-login#tb-login)
Copy as MD Authenticates with your Tinybird account.
The command opens a browser window so that you can authenticate with your Tinybird account.
The credentials are stored in the `.tinyb` file. See [.tinyb file](/docs/forward/datafiles/tinyb-file).
## Options [¶](https://www.tinybird.co/docs/forward/commands/tb-login#options)
| Option | Description |
| --- | --- |
| --host TEXT | Set a custom host if it's different than https://api.tinybird.co. Check[  Regions and endpoints](/docs/api-reference#regions-and-endpoints)   for the available list of regions. |
| --auth-host TEXT | Set the host to authenticate to. If unset, the default host is used. |
| --workspace TEXT | Set the workspace to authenticate to. If unset, the default workspace is used. |
| --use-aws-creds | Use AWS credentials to authenticate. Required to run S3 connections locally. See[  Using AWS credentials](/docs/forward/get-data-in/connectors/s3#using-s3-connector-local-environment)  . |
To log out, run `tb logout`.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-local
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb local · Tinybird Docs"
theme-color: "#171612"
description: "Manage your local development environment"
---
# tb local [¶](https://www.tinybird.co/docs/forward/commands/tb-local#tb-local)
Copy as MD Manages the local development environment. The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| start | Starts the local development environment. |
| restart | Restarts the local development environment. |
| stop | Stops the local development environment. |
| remove | Removes the local development environment. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-job
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb job (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Manage jobs in your Tinybird Forward project"
---
# tb job [¶](https://www.tinybird.co/docs/forward/commands/tb-job#tb-job)
Copy as MD Manage jobs. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| cancel JOB_ID | Tries to cancel a job. |
| details JOB_ID | Gets details for any job created in the last 48h. |
| ls [OPTIONS] | Lists jobs. Use `--status [waiting|working|done|error]`   or `-s`   to show results with the desired status. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-infra
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb infra · Tinybird Docs"
theme-color: "#171612"
description: "Select the infrastructure on which you want to run Tinybird."
---
# tb infra [¶](https://www.tinybird.co/docs/forward/commands/tb-infra#tb-infra)
Copy as MD Helps you deploy Tinybird on a cloud service provider of your choice and manage custom regions. See [Self-managed Tinybird Cloud](/docs/forward/get-started/self-managed).
To list, add, update, or remove infrastructure regions, you can also go to **Settings**, **Managed regions** in Tinybird Cloud.
## Subcommands [¶](https://www.tinybird.co/docs/forward/commands/tb-infra#subcommands)
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| init | Initializes the infrastructure and deploys Tinybird Local in a custom region. By default, the command is interactive and prompts you for the necessary information. |
| add | Adds a new self-managed infrastructure region using an existing infrastructure URL. |
| update | Updates the URL of an existing self-managed infrastructure region. |
| rm NAME | Removes an existing infrastructure region. |
| ls | Lists available infrastructure regions. |
## tb infra init [¶](https://www.tinybird.co/docs/forward/commands/tb-infra#tb-infra-init)
Initializes the selected cloud infrastructure provider to host Tinybird Local.
Running the `tb infra init` command requires the following components:
- AWS
The following tools are required to deploy Tinybird Local on AWS:
- [  Terraform CLI](https://developer.hashicorp.com/terraform/install)   to create the Kubernetes cluster.
- [  Kubectl CLI](https://kubernetes.io/docs/tasks/tools/)   to manage your Kubernetes installation.
- [  AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)   with credentials configured.
Before initiating deployment, you need to set up the following in AWS:
- A zone and domain name in[  Route53 zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html)  .
- Write down the hosted zone name and the zone ID for your domain.
- An[  EKS cluster](https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html)   with the following components:
- [    AWS Load Balancer Controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/)     installed.
- [    external-dns](https://github.com/kubernetes-sigs/external-dns)     configured.
- Both components need sufficient permissions to manage resources.
- Optionally, set a storage class in the EKS cluster with high IOPS and throughput.
The command requires the following information:
- AWS
When prompted, enter the following information from the first step:
- AWS region. For example, `us-east-1`  .
- DNS zone name. For example, `example.com`  .
- DNS record name. For example, `tinybird`
- The Kubernetes context to apply the changes on.
- Kubernetes namespace. For example, `default`  .
- EKS storage class. For example, `gp3-encrypted`  .
Review the changes before applying them. If you want to generate the files without applying them, use the `--skip-apply` flag.
After the deployment is complete, `tb infra` shows the URL to access your Tinybird Local instance. See [tb infra](/docs/forward/commands/tb-infra) for more information and settings.
The following options are available:
| Option | Description |
| --- | --- |
| --name TEXT | Name for identifying the self-managed infrastructure region in Tinybird. |
| --cloud-provider TEXT | Infrastructure provider. Possible values are: `aws`  , `gcp`  , `azure`  . |
| --cloud-region TEXT | AWS region, when using `aws`   as the provider. |
| --dns-zone-name TEXT | DNS zone name. |
| --kubernetes-namespace TEXT | Kubernetes namespace for the deployment. |
| --dns-record TEXT | DNS record name to create, without domain. For example, `tinybird`  . |
| --kubernetes-storage-class TEXT | Storage class for the Kubernetes StatefulSet. |
| --skip-apply | Create all the configuration files without applying them. |
| --auto-apply | Apply all the configuration automatically, without prompting for confirmation. |
The command always generates the following files inside the `infra/<provider>` directory, where `<provider>` is the infrastructure provider:
- config.json: Contains the configuration for the provider.
- k8s.yaml: Contains the Kubernetes configuration.
- main.tf: Contains the Terraform configuration.
## tb infra add [¶](https://www.tinybird.co/docs/forward/commands/tb-infra#tb-infra-add)
Adds a new self-managed infrastructure region using an existing infrastructure URL. The command prompts you for the necessary information.
For example:
tb infra add
Running against Tinybird Cloud: Workspace example_workspace
Enter name: example
Enter host: https://tinybird.example.com
» Adding infrastructure 'example' in Tinybird...
✓ Infrastructure 'example' added
» Required environment variables:
TB_INFRA_TOKEN=example_token
TB_INFRA_WORKSPACE=example_workspace
TB_INFRA_ORGANIZATION=example_organization
TB_INFRA_USER=user@example.com The following options are available:
| Option | Description |
| --- | --- |
| --name TEXT | Name for identifying the self-managed infrastructure in Tinybird. |
| --host TEXT | Host for the infrastructure. |
## tb infra update [¶](https://www.tinybird.co/docs/forward/commands/tb-infra#tb-infra-update)
Updates an existing infrastructure region.
For example:
tb infra update example --host https://tinybird-2.example.com
Running against Tinybird Cloud: Workspace example_workspace
» Updating infrastructure 'test' in Tinybird... The following options are available:
| Option | Description |
| --- | --- |
| --name TEXT | Name for identifying the self-managed infrastructure in Tinybird. |
| --host TEXT | Host for the infrastructure. |
## tb infra rm [¶](https://www.tinybird.co/docs/forward/commands/tb-infra#tb-infra-rm)
Removes an existing infrastructure region.
For example:
tb infra rm example
Running against Tinybird Cloud: Workspace example_workspace
» Deleting infrastructure 'example' from Tinybird...
✓ Infrastructure 'example' deleted
## tb infra ls [¶](https://www.tinybird.co/docs/forward/commands/tb-infra#tb-infra-ls)
Lists all the infrastructure regions.
For example:
tb infra ls
Running against Tinybird Cloud: Workspace example_workspace
** Infras:
--------------------------------------------------------------------------
| name         | host                                                    |
--------------------------------------------------------------------------
| example      | https://tinybird.example.com                            |
| example2     | https://tinybird2.example.com                           |
--------------------------------------------------------------------------
---
URL: https://www.tinybird.co/docs/forward/commands/tb-endpoint
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb endpoint (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Manage endpoints in your Tinybird Forward project"
---
# tb endpoint [¶](https://www.tinybird.co/docs/forward/commands/tb-endpoint#tb-endpoint)
Copy as MD Manage endpoints. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| data PIPE | Prints data returned by the endpoint. |
| ls [OPTIONS] | Lists all the endpoints. |
| stats [OPTIONS] PIPE | Prints stats of the last 7 days for an endpoint. |
| token PIPE | Retrieves a token to call an endpoint. |
| url PIPE | Prints the URL of an endpoint. |
## tb endpoint data [¶](https://www.tinybird.co/docs/forward/commands/tb-endpoint#tb-endpoint-data)
Prints data returned by the endpoint.
| Option | Description |
| --- | --- |
| --query TEXT | Runs a query over endpoint results. |
| --format [json|csv] | Returns the results in the specified format. |
## tb endpoint ls [¶](https://www.tinybird.co/docs/forward/commands/tb-endpoint#tb-endpoint-ls)
Lists all the endpoints.
| Option | Description |
| --- | --- |
| --match TEXT | Retrieves any resource matching the pattern. For example, `--match _test`  . |
| --format [json] | Returns the results in the specified format. |
## tb endpoint stats [¶](https://www.tinybird.co/docs/forward/commands/tb-endpoint#tb-endpoint-stats)
Prints stats of the last 7 days for an endpoint.
| Option | Description |
| --- | --- |
| --format [json] | Returns the results in the specified format. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-diff
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb diff (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "(Forward) Compare local datafiles with remote files in your Workspace"
---
# tb diff [¶](https://www.tinybird.co/docs/forward/commands/tb-diff#tb-diff)
Copy as MD Diffs local datafiles to the corresponding remote files in the Workspace.
## Options [¶](https://www.tinybird.co/docs/forward/commands/tb-diff#options)
| Option | Description |
| --- | --- |
| --fmt / --no-fmt | Format files before doing the diff, default is True so both files match the format. |
| --no-color | Don't colorize diff. |
| --no-verbose | List the resources changed not the content of the diff. |
Remote files are downloaded and stored locally in a `.diff_tmp` directory. If you're versioning the project with git, you can add the directory to the `.gitignore` list.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-dev
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb dev · Tinybird Docs"
theme-color: "#171612"
description: "Build your Tinybird project and validate resources"
---
# tb dev [¶](https://www.tinybird.co/docs/forward/commands/tb-dev#tb-dev)
Copy as MD `tb dev` is an alias for `tb build --watch` . Use `tb dev` to build your project and watch for changes. When in watch mode you can run SQL queries against the project and also run commands, as `--build` becomes the default target.
For example:
tb dev
» Building project...
✓ datasources/user_actions.datasource created
✓ endpoints/user_actions_line_chart.pipe created
✓ endpoints/user_actions_total_widget.pipe created
✓ Rebuild completed in 0.2s
Watching for changes...
tb > You can run commands and queries from the tb dev prompt. For example:
tb » select * from reservoir_levels
» Running QUERY
day          station               abslevel   percentagevolume          volume
Date         String       Nullable(Float32)            Float32         Float32
──────────────────────────────────────────────────────────────────────────────────
2025-02-07   station_4         108667680000       108667680000   1086676860000
──────────────────────────────────────────────────────────────────────────────────
2025-01-13   station_9         325980750000       325980750000   3259807600000
──────────────────────────────────────────────────────────────────────────────────
2025-01-30   station_2         406434020000       406434020000   4064340300000
──────────────────────────────────────────────────────────────────────────────────
2025-02-09   station_2          60706034000        60706034000    607060300000
──────────────────────────────────────────────────────────────────────────────────
2025-01-25   station_7         403222040000       403222040000   4032220400000
──────────────────────────────────────────────────────────────────────────────────
» 331 bytes (5 rows x 5 cols) in 6.85ms
» Showing all rows See [tb build](/docs/forward/commands/tb-build) for more information.
## Target a different deployment stage [¶](https://www.tinybird.co/docs/forward/commands/tb-dev#target-a-different-deployment-stage)
You can target a different deployment stage by passing the `--data-origin` flag.
tb dev --data-origin=production
Running against Tinybird Cloud: Workspace <workspace_name>
» Building project...
** Running 'get_reservoir_levels'
** 'get_reservoir_levels' created
✓ Build completed in 0.9s
Watching for changes... Possible values for `--data-origin` are `production` and `staging`.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-deployment
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb deployment · Tinybird Docs"
theme-color: "#171612"
description: "Deploy your project to the Tinybird platform"
---
# tb deployment [¶](https://www.tinybird.co/docs/forward/commands/tb-deployment#tb-deployment)
Copy as MD Deploys your project to the Tinybird platform. Run using `--cloud` to deploy to Tinybird Cloud.
Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| create [OPTIONS] | Validates and deploy the project in Tinybird. |
| ls | Lists all the deployments of your project. |
| promote | Promotes last deploy to ready and remove old one. Accepts the --wait / --no-wait option. |
| discard | Discards the last deployment. Accepts the --wait / --no-wait option. |
## tb deployment create [¶](https://www.tinybird.co/docs/forward/commands/tb-deployment#tb-deployment-create)
Validates and deploys the project in Tinybird. Run using `--cloud` to deploy to Tinybird Cloud. When deploying to Tinybird Cloud, the command shows the URL of the deployment.
| Option | Description |
| --- | --- |
| --wait / --no-wait | Waits for the deployment to finish. Defaults to not waiting. |
| --auto / --no-auto | Automatically promotes the deployment. Only works if `--wait`   is used. |
| --check / --no-check | Validates the deployment before creating it. Disabled by default. |
| --allow-destructive-operations / --no-allow-destructive-operations | Allows destructive operations, like removing data sources, dropping historical data from tables, and so on. Disabled by default. |
Removing data sources is an irreversible operation. Be careful when using the `--allow-destructive-operations` flag.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-deploy
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb deploy · Tinybird Docs"
theme-color: "#171612"
description: "Deploy your project to Tinybird Cloud."
---
# tb deploy [¶](https://www.tinybird.co/docs/forward/commands/tb-deploy#tb-deploy)
Copy as MD The `tb deploy` command is an alias of `tb deployment create --wait --auto` . Use `tb deploy` to create and promote a deployment to the Tinybird platform.
For example:
tb deploy
Running against Tinybird Local
» Changes to be deployed...
-----------------------------------------------------------------
| status   | name         | path                                |
-----------------------------------------------------------------
| modified | user_actions | datasources/user_actions.datasource |
-----------------------------------------------------------------
✓ Deployment submitted successfully
Deployment is ready
Setting candidate deployment as live
Removing old deployment
Deployment promotion successfully started
Deployment promoted successfully See [tb deployment](/docs/forward/commands/tb-deployment) for more information.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-datasource
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb datasource (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Manage data sources in your Tinybird Forward project"
---
# tb datasource [¶](https://www.tinybird.co/docs/forward/commands/tb-datasource#tb-datasource)
Copy as MD Manages data sources. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| analyze URL_OR_FILE | Analyzes a URL or a file before creating a new data source. |
| append DATASOURCE_NAME URL | Appends data to an existing data source from URL, local file or a connector. For example, `tb datasource append my_datasource https://my_url.com`  . |
| data | Prints data returned by an endpoint. |
| delete [OPTIONS] DATASOURCE_NAME | Deletes rows from a data source. |
| export [OPTIONS] DATASOURCE_NAME | Exports data from a data source to a local file in CSV or NDJSON format. |
| ls [OPTIONS] | Lists data sources. |
| replace DATASOURCE_NAME URL | Replaces the data in a data source from a URL, local file or a connector. |
| truncate [OPTIONS] DATASOURCE_NAME | Truncates a data source. |
## tb datasource data [¶](https://www.tinybird.co/docs/forward/commands/tb-datasource#tb-datasource-data)
Prints data returned by an endpoint.
| Option | Description |
| --- | --- |
| --limit INTEGER | Limits the number of rows to return. |
## tb datasource delete [¶](https://www.tinybird.co/docs/forward/commands/tb-datasource#tb-datasource-delete)
Deletes a data source. For example, `tb datasource delete my_datasource --wait`.
| Option | Description |
| --- | --- |
| --yes | Does not ask for confirmation. |
| --wait | Waits for delete job to finish. |
| --dry-run | Runs the command without deleting anything. |
## tb datasource export [¶](https://www.tinybird.co/docs/forward/commands/tb-datasource#tb-datasource-export)
Exports data from a data source to a local file in CSV or NDJSON format.
For example:
- Export all rows as CSV: `tb datasource export my_datasource`
- Export 1000 rows as NDJSON: `tb datasource export my_datasource --format ndjson --rows 1000`
- Export to specific file: `tb datasource export my_datasource --target ./data/export.csv`
| Option | Description |
| --- | --- |
| --format [csv|ndjson] | Output format (CSV or NDJSON) |
| --rows INTEGER | Number of rows to export (default: 100) |
| --where TEXT | Condition to filter data |
| --target TEXT | Target file path. Default is `datasource_name.{format}` |
| -h, --help | Show this message and exit. |
## tb datasource ls [¶](https://www.tinybird.co/docs/forward/commands/tb-datasource#tb-datasource-ls)
Lists data sources.
| Option | Description |
| --- | --- |
| --match TEXT | Retrieves any resource matching the pattern. |
| --format [json] | Returns the results in the specified format. |
## tb datasource truncate [¶](https://www.tinybird.co/docs/forward/commands/tb-datasource#tb-datasource-truncate)
Truncates a data source. For example, `tb datasource truncate my_datasource`.
| Option | Description |
| --- | --- |
| --yes | Does not ask for confirmation. |
| --cascade | Truncates the dependent data source attached in cascade to the given data source. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-create
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb create · Tinybird Docs"
theme-color: "#171612"
description: "Creates an empty data project with predefined folders, CI configuration files, and a git repository."
---
# tb create [¶](https://www.tinybird.co/docs/forward/commands/tb-create#tb-create)
Copy as MD Creates an empty data project with predefined folders, CI configuration files, and a git repository.
Pass the `--prompt` flag to generate a customized starter project based on your prompt.
## Options [¶](https://www.tinybird.co/docs/forward/commands/tb-create#options)
| Option | Description |
| --- | --- |
| --prompt STRING | Prompt to generate a customized initial project. |
| --folder PATH | Path that will contain the Tinybird project files. Dotfiles are created in project's root. |
| --data PATH | Creates a data project based on the files in the specified directory |
| --agent | Creates rules for an LLM agent. Supported values are `cursor`   and `windsurf`   . The default value is `cursor`  . |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-copy
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb copy (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Manage copy pipes in your Tinybird Forward project"
---
# tb copy [¶](https://www.tinybird.co/docs/forward/commands/tb-copy#tb-copy)
Copy as MD Manages copy pipes. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| ls | Lists all the copy pipes. |
| run [OPTIONS] PIPE_NAME_OR_ID | Runs a copy job. |
| pause PIPE_NAME_OR_ID | Pauses a copy job. |
| resume PIPE_NAME_OR_ID | Resumes a copy job. |
## tb copy run [¶](https://www.tinybird.co/docs/forward/commands/tb-copy#tb-copy-run)
Runs a copy job.
| Option | Description |
| --- | --- |
| --wait / --no-wait | Waits for the copy job to finish. |
| --mode [append|replace] | Defines the copy strategy. |
| --yes | Does not ask for confirmation. |
| --param TEXT | Key and value of the params you want the Copy pipe to be called with. For example: tb pipe copy run <my_copy_pipe> --param foo=bar |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-connection
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb connection · Tinybird Docs"
theme-color: "#171612"
description: "Manage your data connections from the terminal."
---
# tb connection [¶](https://www.tinybird.co/docs/forward/commands/tb-connection#tb-connection)
Copy as MD Manage your data connections. Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
Connections are configured through .connection files. See [Connection files](/docs/forward/datafiles/connection-files).
## Subcommands [¶](https://www.tinybird.co/docs/forward/commands/tb-connection#subcommands)
The following subcommands are available:
| Subcommand | Description |
| --- | --- |
| create TYPE | Create a new connection. Supported values are: `s3`  . |
| ls | Lists all connections in the project. |
## tb connection ls [¶](https://www.tinybird.co/docs/forward/commands/tb-connection#tb-connection-ls)
Lists connections.
| Option | Description |
| --- | --- |
| --service TEXT | Filter by service. |
---
URL: https://www.tinybird.co/docs/forward/commands/tb-build
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb build (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Build your Tinybird Forward project and validate resources"
---
# tb build [¶](https://www.tinybird.co/docs/forward/commands/tb-build#tb-build)
Copy as MD Builds your project and checks that all the resources are valid.
Pass the `--watch` flag to watch for changes and rebuild the project automatically. When in watch mode you can run SQL queries against the project and also run commands, as `--build` becomes the default target.
Use `tb dev` as an alias for `tb build --watch`.
## Target a different deployment stage [¶](https://www.tinybird.co/docs/forward/commands/tb-build#target-a-different-deployment-stage)
You can target a different deployment stage by passing the `--data-origin` flag.
tb build --data-origin=production
Running against Tinybird Cloud: Workspace <workspace_name>
» Building project...
** Running 'get_reservoir_levels'
** 'get_reservoir_levels' created
✓ Build completed in 0.9s
Watching for changes... Possible values for `--data-origin` are `production` and `staging`.
## Difference with tb deployment create [¶](https://www.tinybird.co/docs/forward/commands/tb-build#difference-with-tb-deployment-create)
While similar, `tb build` and `tb deployment create` have different purposes:
- `tb build`   command is a stateless command that checks that project[  datafiles](/docs/forward/datafiles)   are valid.
- `tb deployment create --check`   checks that you can successfully create the deployment.
For example, when updating a data project in a workspace, `tb build` checks that the new version of your project is valid, while `tb deployment create --check` verifies that you can successfully migrate from the old version to the new one.
---
URL: https://www.tinybird.co/docs/forward/commands/tb-auth
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "tb auth (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Configure your Tinybird Forward authentication"
---
# tb auth [¶](https://www.tinybird.co/docs/forward/commands/tb-auth#tb-auth)
Copy as MD Configures your Tinybird Forward authentication by authenticating against a Tinybird host. The credentials are stored in the `.tinyb` file. See [.tinyb file](/docs/forward/datafiles/tinyb-file).
Global options apply to this command. See [Global options](/docs/forward/commands/global-options).
## Subcommands [¶](https://www.tinybird.co/docs/forward/commands/tb-auth#subcommands)
The following subcommands are available:
| Command | Description |
| --- | --- |
| info OPTIONS | Gets information about the authentication in use. |
| ls OPTIONS | Lists available regions to authenticate. |
| use OPTIONS REGION_NAME_OR_HOST_OR_ID | Switches to a different region. You can pass the region name, the region host URL, or the region index after listing available regions with `tb auth ls`   . For example, `tb auth use us-east`  . |
## Options [¶](https://www.tinybird.co/docs/forward/commands/tb-auth#options)
The following options are available to `tb auth` and its subcommands:
| Option | Description |
| --- | --- |
| --host TEXT | Tinybird host. Defaults to the value of the `TB_HOST`   environment variable, then to `https://api.tinybird.co`  . |
| --token TEXT | Authentication token. Defaults to the value of the `TB_TOKEN`   environment variable, then to the `.tinyb`   file. |
| --region TEXT | Region to authenticate to. |
| --connector [bigquery] | Set credentials for one of the supported connectors. |
| -i / --interactive | Interactive mode. |
---
URL: https://www.tinybird.co/docs/forward/commands/global-options
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Global options · Tinybird Docs"
theme-color: "#171612"
description: "Global options for the Tinybird Forward CLI"
---
# Global options [¶](https://www.tinybird.co/docs/forward/commands/global-options#global-options)
Copy as MD The following options are available for all commands.
Enter them before the command name. For example: `tb --host https://api.tinybird.co workspace ls`.
| Option | Description |
| --- | --- |
| --host TEXT | Tinybird host. Defaults to the value of the `TB_HOST`   environment variable, then to `https://api.tinybird.co`  . |
| --token TEXT | Authentication token. Defaults to the value of the `TB_TOKEN`   environment variable, then to the `.tinyb`   file. See[  .tinyb file](/docs/forward/datafiles/tinyb-file)  . |
| --show-tokens | Shows available tokens. |
| --user-token | Use the user token, defaults to the `TB_USER_TOKEN`   environment variable, then to the .tinyb file. See[  .tinyb file](/docs/forward/datafiles/tinyb-file)  . |
| --cloud / --local | Run against Tinybird Cloud or Tinybird Local. Local is the default except when in build mode. See[  Environments](/docs/forward/get-started/environments)  . |
| --build | Run against the build mode. Default when running `tb dev`   or `tb build --watch`  . |
| --staging | Run against the staging deployment. |
| --debug / --no-debug | Prints internal representation. Combine it with any command to get more information. |
| --version | Shows the version and exits. |
| -h, --help | Shows help for the command. |
---
URL: https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cli
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "CLI · Tinybird Docs"
theme-color: "#171612"
description: "Deploy your Tinybird project using the CLI."
---
# Deploying to Tinybird using the CLI [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cli#deploying-to-tinybird-using-the-cli)
Copy as MD You can deploy your data projects to Tinybird Cloud directly from the command line using the [Tinybird CLI](/docs/forward/commands).
To deploy to Tinybird Cloud, create a staging deployment using the `--cloud` flag. This prepares all the resources in the cloud environment.
1
## Check the deployment [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cli#check-the-deployment)
Before creating the deployment, you can check the deployment with the `--check` flag. This runs a series of checks to ensure the deployment is ready. This is similar to a dry run.
# Checks the deployment
tb --cloud deployment create --check 2
## Create a staging deployment [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cli#create-a-staging-deployment)
Create a new staging deployment in Tinybird Cloud. Pass the `--wait` flag to wait for the deployment to finish:
# Prepares all resources in Tinybird Cloud
tb --cloud deployment create --wait To run commands against the staging deployment, use the `--staging` flag. For example:
tb --staging --cloud endpoint ls 3
## Promote to live [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cli#promote-to-live)
When the staging deployment is ready, promote it to a live deployment in Tinybird Cloud:
# Enables the deployment in Tinybird Cloud
tb --cloud deployment promote To deploy and promote in one step, use the `tb deploy` alias. For example: `tb --cloud deploy`.
## Next steps [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cli#next-steps)
- Learn more about[  environments](/docs/forward/get-started/environments)  .
- Learn about datafiles, like .datasource and .pipe files. See[  Datafiles](/docs/forward/datafiles)  .
- Browse the Tinybird CLI commands reference. See[  Commands reference](/docs/forward/commands)  .
---
URL: https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cicd
Last update: 2025-03-21T16:53:54.000Z
Content:
---
title: "CI/CD · Tinybird Docs"
theme-color: "#171612"
description: "Deploy your Tinybird project through CI/CD workflows."
---
# Deploying to Tinybird through CI/CD [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cicd#deploying-to-tinybird-through-cicd)
Copy as MD After you create your data project in Git, you can implement continuous integration (CI) and continuous deployment (CD) workflows to automate interaction with Tinybird.
When you create a project using `tb create` , Tinybird generates CI/CD templates you can use in GitHub and GitLab to automate testing and deployment.
The Tinybird Local container is a key part of the CI workflow. See [Local container](/docs/forward/get-started/install-tinybird/local) for more information.
## CI workflow [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cicd#ci-workflow)
As you expand and iterate on your data projects, you can continuously validate your changes. In the same way that you write integration and acceptance tests for source code in a software project, you can write automated tests for your API Endpoints to run on each pull or merge request.
A potential CI workflow could run the following steps when you open a pull request:
1. Install Tinybird CLI: Sets up dependencies and installs the Tinybird CLI to run the required commands.
2. Build project: Checks the datafile syntax and correctness.
3. Test project: Runs fixture tests, data quality tests, or both to validate changes.
4. Deployment check: Validates the deployment before creating it, similar to a dry run.
The following templates are available for GitHub and GitLab:
- GitHub
- GitLab
name: Tinybird - CI Workflow
on:
workflow_dispatch:
pull_request:
branches:
- main
- master
types: [opened, reopened, labeled, unlabeled, synchronize]
concurrency: ${{ github.workflow }}-${{ github.event.pull_request.number }}
env:
TINYBIRD_HOST: ${{ secrets.TINYBIRD_HOST }}
TINYBIRD_TOKEN: ${{ secrets.TINYBIRD_TOKEN }}
jobs:
ci:
runs-on: ubuntu-latest
defaults:
run:
working-directory: '.'
services:
tinybird:
image: tinybirdco/tinybird-local:beta
ports:
- 7181:7181
steps:
- uses: actions/checkout@v3
- name: Install Tinybird CLI
run: curl https://tinybird.co | sh
- name: Build project
run: tb build
- name: Test project
run: tb test run
- name: Deployment check
run: tb --cloud --host ${{ env.TINYBIRD_HOST }} --token ${{ env.TINYBIRD_TOKEN }} deploy --check
## CD workflow [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cicd#cd-workflow)
Once your changes are validated by the CI pipeline, you can automate the deployment process and let Tinybird handle the migration for you with no downtime.
A potential CD workflow could run the following steps when you merge a pull request:
1. Install Tinybird CLI: Sets up dependencies and installs the Tinybird CLI to run the required commands.
2. Deploy project: Creates a staging deployment in Tinybird Cloud, migrates data, promotes to live, and removes previous deployment.
The following templates are available for GitHub and GitLab:
- GitHub
- GitLab
name: Tinybird - CD Workflow
on:
push:
branches:
- main
- master
concurrency: ${{ github.workflow }}-${{ github.event.ref }}
env:
TINYBIRD_HOST: ${{ secrets.TINYBIRD_HOST }}
TINYBIRD_TOKEN: ${{ secrets.TINYBIRD_TOKEN }}
jobs:
cd:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v3
- name: Install Tinybird CLI
run: curl https://tinybird.co | sh
- name: Deploy project
run: tb --cloud --host ${{ env.TINYBIRD_HOST }} --token ${{ env.TINYBIRD_TOKEN }} deploy
## Secrets [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cicd#secrets)
Make sure to provide the values for the following secrets in your CI/CD settings:
- `TINYBIRD_HOST`
- `TINYBIRD_TOKEN`
Run `tb auth info` to get the values for the secrets. For example:
tb auth info
------------------------------------------------------------------------------------------------------------------------
user: user@tinybird.co
user_token: <user_token>
token: <token>
host: https://api.europe-west2.gcp.tinybird.co
ui: https://cloud.tinybird.co/gcp/europe-west2
workspace_name: demo_ws
workspace_id: <workspace_id>
------------------------------------------------------------------------------------------------------------------------ `tb_secrets` replacements happen at parser time in the server. If a secret is changed after a deployment is done, Tinybird won’t detect it automatically and will require an extra deployment.
## Next steps [¶](https://www.tinybird.co/docs/forward/test-and-deploy/deployments/cicd#next-steps)
- Learn more about[  deployments](/docs/forward/test-and-deploy/deployments)  .
- Learn about the[  Local container](/docs/forward/get-started/install-tinybird/local)  .
- Learn about datafiles, like .datasource and .pipe files. See[  Datafiles](/docs/forward/datafiles)  .
- Browse the Tinybird CLI commands reference. See[  Commands reference](/docs/forward/commands)  .
---
URL: https://www.tinybird.co/docs/forward/get-started/self-managed/manual
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Add a self-managed region manually · Tinybird Docs"
theme-color: "#171612"
description: "Create your own Tinybird Cloud region in the cloud service provider of your choice."
---
# Add a self-managed region manually [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#add-a-self-managed-region-manually)
Copy as MD To add a self-managed region manually, you need to:
1. Create a region in Tinybird Cloud.
2. Deploy the Tinybird Local container on your cloud provider.
Self-managed regions are currently in beta. Use them for development environments only; avoid production workloads. Features, requirements, and implementation details might change as we continue to improve this capability.
## Resource requirements [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#resource-requirements)
When planning your self-managed region deployment, consider the following resource requirements:
- Compute: At least 4 vCPUs and 16 GB RAM for development environments. Production environments may require more resources depending on your workload.
- Storage: Allocate at least 100 GB for the ClickHouse volume and 10 GB for the Redis volume. Scale according to your data volume needs.
- Required paths in the container are `/redis-data`     and `/var/lib/clickhouse`
- Network: Ensure your deployment has sufficient bandwidth for your expected query and ingestion rates.
- You also need a publicly accessible HTTPS URL. For example, `https://tinybird.example.com`    .
- Init parameters: Provide the following parameters to the deployed container. These parameters can be provided in the `tb infra add`   command or automatically generated by `tb infra init`  :
- `TB_INFRA_TOKEN`
- `TB_INFRA_WORKSPACE`
- `TB_INFRA_ORGANIZATION`
- `TB_INFRA_USER`
## Create a region manually [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#create-a-region-manually)
To add a new self-managed region to Tinybird Cloud manually, follow these steps:
1
### Log into Tinybird Cloud [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#log-into-tinybird-cloud)
Log into Tinybird Cloud using the `tb login` command.
tb login 2
### Add the new region [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#add-the-new-region)
Before you deploy the `tblocal` container on your cloud provider, add a self-managed region using `tb infra add`:
tb infra add
Running against Tinybird Cloud: Workspace example_workspace
Enter name: example
Enter host: https://tinybird.example.com
» Adding infrastructure 'example' in Tinybird...
✓ Infrastructure 'example' added
» Required environment variables:
TB_INFRA_TOKEN=example_token
TB_INFRA_WORKSPACE=example_workspace
TB_INFRA_ORGANIZATION=example_organization
TB_INFRA_USER=user@example.com The host is optional, as you might not known it yet. You can update it later using `tb infra update` . Copy the environment variables and their values to use in the next step.
If you're an organization admin, you can also list, add, update, or remove infrastructure regions in Tinybird Cloud. Go to **Settings**, **Managed regions** in the Tinybird Cloud.
3
### Deploy Tinybird Local [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#deploy-tinybird-local)
Deploy the [Tinybird Local](/docs/forward/get-started/install-tinybird/local) container on your cloud provider. At the end of the deployment, the `tblocal` container must be publicly accessible on an HTTP URL, which is the host of the self-managed region.
Make sure to expose and set the following environment variables to the `tblocal` container using the values provided in the previous step:
- `TB_INFRA_TOKEN`
- `TB_INFRA_WORKSPACE`
- `TB_INFRA_ORGANIZATION`
- `TB_INFRA_USER`
4
### Log into your instance [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#log-into-your-instance)
Navigate to your Tinybird project and run `tb login --host <host>` , where `<host>` is the host of your self-managed region that you set up in the previous step.
tb login --host https://<host> 5
### Use your instance [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#use-your-instance)
After you're logged in, you can run commands against it using the `--cloud` flag.
tb --cloud workspace ls
## Examples [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#examples)
The following examples show how to add a self-managed region manually in different cloud providers.
- [  Minimal setup on a dedicated VM](https://gist.github.com/alejandromav/f4b61d77580ad9596a0a92c6a2df7c19)
## Troubleshooting [¶](https://www.tinybird.co/docs/forward/get-started/self-managed/manual#troubleshooting)
If you encounter issues with your self-managed region:
- Check the container logs for error messages.
- Verify that all required environment variables are set correctly.
- Ensure your network configuration allows the necessary connections.
- Confirm that your persistent volumes are properly mounted and have sufficient space.
- For connectivity issues, verify that your HTTPS endpoint is properly configured.
For additional help, contact Tinybird support with details about your deployment.
---
URL: https://www.tinybird.co/docs/forward/get-started/self-managed/assisted
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Use the CLI to add a self-managed region · Tinybird Docs"
theme-color: "#171612"
description: "Create your own Tinybird Cloud region in the cloud service provider of your choice."
---
- AWS
The following tools are required to deploy Tinybird Local on AWS:
- [  Terraform CLI](https://developer.hashicorp.com/terraform/install)   to create the Kubernetes cluster.
- [  Kubectl CLI](https://kubernetes.io/docs/tasks/tools/)   to manage your Kubernetes installation.
- [  AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)   with credentials configured.
Before initiating deployment, you need to set up the following in AWS:
- A zone and domain name in[  Route53 zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html)  .
- Write down the hosted zone name and the zone ID for your domain.
- An[  EKS cluster](https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html)   with the following components:
- [    AWS Load Balancer Controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/)     installed.
- [    external-dns](https://github.com/kubernetes-sigs/external-dns)     configured.
- Both components need sufficient permissions to manage resources.
- Optionally, set a storage class in the EKS cluster with high IOPS and throughput.
---
URL: https://www.tinybird.co/docs/forward/get-started/install-tinybird/local
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Tinybird Local container (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Use the Tinybird Local container to run Tinybird locally and in CI workflows."
---
# Tinybird Local container [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird/local#tinybird-local-container)
Copy as MD You can run your own Tinybird instance locally using the `tinybird-local` container.
The Tinybird Local container is useful in CI/CD pipelines. See [CI/CD](/docs/forward/test-and-deploy/deployments/cicd) for more information. You can also deploy it on your own cloud infrastructure.
## Prerequisites [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird/local#prerequisites)
To get started, you need a container runtime, like Docker or orbstack.
## Run the Tinybird Local container [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird/local#run-the-tinybird-local-container)
To run Tinybird locally, run the following command:
docker run --platform linux/amd64 -p 7181:7181 --name tinybird-local -d tinybirdco/tinybird-local:latest By default, Tinybird Local runs on port 7181, although you can expose it locally using any other port.
## Deploy on a cloud provider [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird/local#deploy-on-a-cloud-provider)
You can deploy Tinybird Local on a cloud provider of your choice. See [Self-managed Tinybird Cloud](/docs/forward/get-started/self-managed).
You can also create a self-managed region by deploying the container on the following Platform as a Service (PaaS) providers:
- Fly.io
- Zeet
- Google Cloud Run
- CloudFoundry
- Azure Container Instances
- DigitalOcean App Platform
When deploying Tinybird Local on a PaaS, make sure to expose the following environment variables to the container:
- `TB_INFRA_TOKEN`
- `TB_INFRA_WORKSPACE`
- `TB_INFRA_ORGANIZATION`
- `TB_INFRA_USER`
See [tb infra](/docs/forward/commands/tb-infra) for more information.
## API endpoints [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird/local#api-endpoints)
By default, the Tinybird Local container exposes the following API endpoint:
- `http://localhost:7181/api/v0/`
You can call all the existing [Tinybird API endpoints](/docs/api-reference) locally. For example:
```shell
curl \
-X POST 'http://localhost:7181/v0/events?name=<your_datasource>' \
-H "Authorization: Bearer <your_token>" \
-d $'<your_data>'
## Next steps [¶](https://www.tinybird.co/docs/forward/get-started/install-tinybird/local#next-steps)
- Learn about environments. See[  Environments](/docs/forward/get-started/environments)  .
- Learn about datafiles. See[  Datafiles](/docs/forward/datafiles)  .
- Learn about the Tinybird CLI. See[  Command reference](/docs/forward/commands)  .
---
URL: https://www.tinybird.co/docs/forward/get-data-in/connectors/s3
Last update: 2025-03-21T14:06:38.000Z
Content:
---
title: "S3 connector (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Learn how to configure the S3 connector for Tinybird."
---
# S3 connector [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#s3-connector)
Copy as MD You can set up an S3 connector to load your CSV, NDJSON, or Parquet files into Tinybird from any S3 bucket. Tinybird can detect new files in your buckets and ingest them automatically.
Setting up the S3 connector requires:
1. Configuring AWS permissions using[  IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html)  .
2. Creating a connection file in Tinybird.
3. Creating a data source that uses this connection
## Environment considerations [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#environment-considerations)
Before setting up the connector, understand how it works in different environments. See [Environments](/docs/forward/get-started/environments).
### Cloud environment [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#cloud-environment)
In the Tinybird Cloud environment, Tinybird uses its own AWS account to assume the IAM role you create, allowing it to access your S3 bucket.
### Local environment [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#local-environment)
When using the S3 connector in the Tinybird Local environment, which runs in a container, you need to pass your local AWS credentials to the container. These credentials must have the [permissions described in the AWS permissions section](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#aws-permissions) , including access to S3 operations like `GetObject`, `ListBucket` , etc. This allows Tinybird Local to assume the IAM role you specify in your connection.
To pass your AWS credentials, use the `--use-aws-creds` flag when starting Tinybird Local:
tb local start --use-aws-creds
» Starting Tinybird Local...
✓ AWS credentials found and will be passed to Tinybird Local (region: us-east-1)
* Waiting for Tinybird Local to be ready...
✓ Tinybird Local is ready! If you're using a specific AWS profile, you can specify it using the `AWS_PROFILE` environment variable:
AWS_PROFILE=my-profile tb local start --use-aws-creds When using the S3 connector in the `--local` environment, continuous file ingestion is limited. For continuous ingestion of new files, use the Cloud environment.
## Set up the connector [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#set-up-the-connector)
1
### Create an S3 connection [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#create-an-s3-connection)
You can create an S3 connection in Tinybird using either the guided CLI process or by manually creating a connection file.
#### Option 1: Use the guided CLI process (Recommended) [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#option-1-use-the-guided-cli-process-recommended)
The Tinybird CLI provides a guided process that helps you set up the required AWS permissions and creates the connection file automatically:
tb connection create s3 When prompted, you'll need to:
1. Enter a name for your connection.
2. Enter the S3 bucket name.
3. Enter the AWS region where your bucket is located.
4. Copy the displayed AWS IAM policy to your clipboard (you'll need this to set up permissions in AWS).
5. Copy the displayed AWS IAM role trust policy for your Local environment, then enter the ARN of the role you create.
6. Copy the displayed AWS IAM role trust policy for your Cloud environment, then enter the ARN of the role you create.
7. The ARN values will be stored securely using[  tb secret](/docs/forward/commands/tb-secret)   , which will allow you to have different roles for each environment.
#### Option 2: Create a connection file manually [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#option-2-create-a-connection-file-manually)
You can also set up a connection manually by creating a [connection file](/docs/forward/datafiles/connection-files) with the required credentials:
##### s3sample.connection
TYPE s3
S3_REGION "<S3_REGION>"
S3_ARN "<IAM_ROLE_ARN>" When creating your connection manually, you need to set up the required AWS IAM role with appropriate permissions. See the [AWS permissions](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#aws-permissions) section for details on the required access policy and trust policy configurations.
See [Connection files](/docs/forward/datafiles/connection-files) for more details on how to create a connection file and manage secrets.
You need to create separate connections for each environment you're working with, Local and Cloud. See [Environments](/docs/forward/get-started/environments).
For example, you can create:
- `my-s3-local`   for your Local environment
- `my-s3-cloud`   for your Cloud environment
2
### Create an S3 data source [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#create-an-s3-data-source)
After creating the connection, you need to create a data source that uses it.
Create a .datasource file using `tb create --prompt` or manually:
##### s3sample.datasource
DESCRIPTION >
Analytics events landing data source
SCHEMA >
`timestamp` DateTime `json:$.timestamp`,
`session_id` String `json:$.session_id`,
`action` LowCardinality(String) `json:$.action`,
`version` LowCardinality(String) `json:$.version`,
`payload` String `json:$.payload`
ENGINE "MergeTree"
ENGINE_PARTITION_KEY "toYYYYMM(timestamp)"
ENGINE_SORTING_KEY "timestamp"
ENGINE_TTL "timestamp + toIntervalDay(60)"
IMPORT_CONNECTION_NAME s3sample
IMPORT_BUCKET_URI s3://my-bucket/*.csv
IMPORT_SCHEDULE @auto The `IMPORT_CONNECTION_NAME` setting must match the name of the .connection file you created in the previous step.
3
### Test the connection [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#test-the-connection)
After defining your S3 data source and connection, test it by running a deploy check:
tb --cloud deploy --check This runs the connection locally and checks if the connection is valid. To see the connection details, run `tb --cloud connection ls`.
## .connection settings [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#connection-settings)
The S3 connector use the following settings in .connection files:
| Instruction | Required | Description |
| --- | --- | --- |
| `S3_REGION` | Yes | Region of the S3 bucket. |
| `S3_ARN` | Yes | ARN of the IAM role with the required permissions. |
Once a connection is used in a data source, you can't change the ARN account ID or region. To modify these values, you must:
1. Remove the connection from the data source.
2. Deploy the changes.
3. Add the connection again with the new values.
## .datasource settings [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#datasource-settings)
The S3 connector uses the following settings in .datasource files:
| Instruction | Required | Description |
| --- | --- | --- |
| `IMPORT_SCHEDULE` | Yes | Use `@auto`   to ingest new files automatically, or `@once`   to only execute manually. Note that in the `--local`   environment, even if you set `@auto`   , only the initial sync will be performed, loading all existing files, but the connector will not continue to automatically ingest new files afterwards. |
| `IMPORT_CONNECTION_NAME` | Yes | Name given to the connection inside Tinybird. For example, `'my_connection'`   . This is the name of the connection file you created in the previous step. |
| `IMPORT_BUCKET_URI` | Yes | Full bucket path, including the `s3://`   protocol, bucket name, object path, and an optional pattern to match against object keys. For example, `s3://my-bucket/my-path`   discovers all files in the bucket `my-bucket`   under the prefix `/my-path`   . You can use patterns in the path to filter objects, for example, ending the path with `*.csv`   matches all objects that end with the `.csv`   suffix. |
| `IMPORT_FROM_TIMESTAMP` | No | Sets the date and time from which to start ingesting files on an S3 bucket. The format is `YYYY-MM-DDTHH:MM:SSZ`  . |
Once `IMPORT_BUCKET_URI` is set, you can't change it. To modify the bucket URI, you must:
1. Remove the connection from the data source.
2. Deploy the changes.
3. Add the connection again with the new bucket URI.
You can't change `IMPORT_SCHEDULE` from `@auto` to `@once` . You must create a new data source with the desired schedule setting.
Changing from `@once` to `@auto` is possible, and automatically ingests all files that match the bucket URI pattern.
## S3 file URI [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#s3-file-uri)
The S3 connector supports the following wildcard patterns:
- Single asterisk or `*`   : matches zero or more characters within a single directory level, excluding `/`   . It doesn't cross directory boundaries. For example, `s3://bucket-name/*.ndjson`   matches all `.ndjson`   files in the root of your bucket but doesn't match files in subdirectories.
- Double asterisk or `**`   : matches zero or more characters across multiple directory levels, including `/`   . It can cross directory boundaries recursively. For example: `s3://bucket-name/**/*.ndjson`   matches all `.ndjson`   files in the bucket, regardless of their directory depth.
Use the full S3 file URI and wildcards to select multiple files. The file extension is required to accurately match the desired files in your pattern.
Due to a limitation in Amazon S3, you can't create different S3 data sources with path expressions that collide. For example: `s3://my_bucket/**/*.csv` and `s3://my_bucket/transactions/*.csv`.
### Examples [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#examples)
The following are examples of patterns you can use and whether they'd match the example file path:
| File path | S3 File URI | Will match? |
| --- | --- | --- |
| example.ndjson | `s3://bucket-name/*.ndjson` | Yes. Matches files in the root directory with the `.ndjson`   extension. |
| example.ndjson.gz | `s3://bucket-name/**/*.ndjson.gz` | Yes. Recursively matches `.ndjson.gz`   files anywhere in the bucket. |
| example.ndjson | `s3://bucket-name/example.ndjson` | Yes. Exact match to the file path. |
| pending/example.ndjson | `s3://bucket-name/*.ndjson` | No. `*`   doesn't cross directory boundaries. |
| pending/example.ndjson | `s3://bucket-name/**/*.ndjson` | Yes. Recursively matches `.ndjson`   files in any subdirectory. |
| pending/example.ndjson | `s3://bucket-name/pending/example.ndjson` | Yes. Exact match to the file path. |
| pending/example.ndjson | `s3://bucket-name/pending/*.ndjson` | Yes. Matches `.ndjson`   files within the `pending`   directory. |
| pending/example.ndjson | `s3://bucket-name/pending/**/*.ndjson` | Yes. Recursively matches `.ndjson`   files within `pending`   and all its subdirectories. |
| pending/example.ndjson | `s3://bucket-name/**/pending/example.ndjson` | Yes. Matches the exact path to `pending/example.ndjson`   within any preceding directories. |
| pending/example.ndjson | `s3://bucket-name/other/example.ndjson` | No. Doesn't match because the path includes directories which aren't part of the file's actual path. |
| pending/example.ndjson.gz | `s3://bucket-name/pending/*.csv.gz` | No. The file extension `.ndjson.gz`   doesn't match `.csv.gz` |
| pending/o/inner/example.ndjson | `s3://bucket-name/*.ndjson` | No. `*`   doesn't cross directory boundaries. |
| pending/o/inner/example.ndjson | `s3://bucket-name/**/*.ndjson` | Yes. Recursively matches `.ndjson`   files anywhere in the bucket. |
| pending/o/inner/example.ndjson | `s3://bucket-name/**/inner/example.ndjson` | Yes. Matches the exact path to `inner/example.ndjson`   within any preceding directories. |
| pending/o/inner/example.ndjson | `s3://bucket-name/**/ex*.ndjson` | Yes. Recursively matches `.ndjson`   files starting with `ex`   at any depth. |
| pending/o/inner/example.ndjson | `s3://bucket-name/**/**/*.ndjson` | Yes. Matches `.ndjson`   files at any depth, even with multiple `**`   wildcards. |
| pending/o/inner/example.ndjson | `s3://bucket-name/pending/**/*.ndjson` | Yes. Matches `.ndjson`   files within `pending`   and all its subdirectories. |
| pending/o/inner/example.ndjson | `s3://bucket-name/inner/example.ndjson` | No. Doesn't match because the path includes directories which aren't part of the file's actual path. |
| pending/o/inner/example.ndjson | `s3://bucket-name/pending/example.ndjson` | No. Doesn't match because the path includes directories which aren't part of the file's actual path. |
| pending/o/inner/example.ndjson.gz | `s3://bucket-name/pending/*.ndjson.gz` | No. `*`   doesn't cross directory boundaries. |
| pending/o/inner/example.ndjson.gz | `s3://bucket-name/other/example.ndjson.gz` | No. Doesn't match because the path includes directories which aren't part of the file's actual path. |
### Considerations [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#considerations)
When using patterns:
- Use specific directory names or even specific file URIs to limit the scope of your search. The more specific your pattern, the narrower the search.
- Combine wildcards: you can combine `**`   with other patterns to match files in subdirectories selectively. For example, `s3://bucket-name/**/logs/*.ndjson`   matches `.ndjson`   files within any logs directory at any depth.
- Avoid unintended matches: be cautious with `**`   as it can match many files, which might impact performance and return partial matches.
## Supported file types [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#supported-file-types)
The S3 connector supports the following file types:
| File type | Accepted extensions | Compression formats supported |
| --- | --- | --- |
| CSV | `.csv`  , `.csv.gz` | `gzip` |
| NDJSON | `.ndjson`  , `.ndjson.gz`  , `.jsonl`  , `.jsonl.gz`  , `.json`  , `.json.gz` | `gzip` |
| Parquet | `.parquet`  , `.parquet.gz` | `snappy`  , `gzip`  , `lzo`  , `brotli`  , `lz4`  , `zstd` |
You can upload files with .json extension, provided they follow the Newline Delimited JSON (NDJSON) format. Each line must be a valid JSON object and every line has to end with a `\n` character.
Parquet schemas use the same format as NDJSON schemas, using JSONPath syntax.
## AWS permissions [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/s3#aws-permissions)
The S3 connector requires an IAM Role with specific permissions to access objects in your Amazon S3 bucket:
- `s3:GetObject`
- `s3:ListBucket`
- `s3:GetBucketNotification`
- `s3:PutBucketNotification`
- `s3:GetBucketLocation`
- `s3:PutObject`
- `s3:PutObjectAcl`
You need to create both an access policy and a trust policy in AWS:
- AWS Access Policy
- AWS Trust Policy
{
"Version": "2012-10-17",
"Statement": [
{
"Effect": "Allow",
"Action": [
"s3:GetObject",
"s3:ListBucket",
"s3:GetBucketNotification",
"s3:PutBucketNotification",
"s3:GetBucketLocation",
"s3:PutObject",
"s3:PutObjectAcl"
],
"Resource": [
"arn:aws:s3:::{bucket-name}",
"arn:aws:s3:::{bucket-name}/*"
]
}
]
}
---
URL: https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka
Last update: 2025-03-20T10:40:58.000Z
Content:
---
title: "Kafka connector (Forward) · Tinybird Docs"
theme-color: "#171612"
description: "Learn how to configure the Kafka connector for Tinybird."
---
# Kafka connector [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#kafka-connector)
Copy as MD You can set up a Kafka connector to stream data from your Kafka topic to Tinybird. Setting up the Kafka connector requires creating and enabling a data source and its connection as separate files.
## Compatibility [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#compatibility)
The connector is compatible with Apache Kafka, so any other compatible implementation and vendors should work. The following vendors and implementations are supported:
- Apache Kafka
- Confluent Platform and Confluent Cloud
- Redpanda
- AWS MSK
- Azure Event Hubs
- Estuary
## Prerequisites [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#prerequisites)
Grant `READ` permissions to both the topic and the consumer group to ingest data from Kafka into Tinybird.
You must secure your Kafka brokers with SSL/TLS and SASL. Tinybird uses `SASL_SSL` as the security protocol for the Kafka consumer. Connections are rejected if the brokers only support `PLAINTEXT` or `SASL_PLAINTEXT`.
Kafka Schema Registry is supported only for decoding Avro messages.
## Set up the connector [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#set-up-the-connector)
To set up the Kafka connector, follow these steps.
1
### Create a Kafka connection [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#create-a-kafka-connection)
Before you create and configure a Kafka data source, you need to set up a connection. Create a .connection file with the required credentials stored in secrets. For example:
##### kafkasample.connection
TYPE kafka
KAFKA_BOOTSTRAP_SERVERS {{ tb_secret("KAFKA_SERVERS") }}
KAFKA_SECURITY_PROTOCOL SASL_SSL
KAFKA_SASL_MECHANISM PLAIN
KAFKA_KEY {{ tb_secret("KAFKA_USERNAME") }}
KAFKA_SECRET {{ tb_secret("KAFKA_PASSWORD") }} Secrets replacements happen at parsing time in the server. If you change a secret after doing a deployment, you might need to do an additional deployment.
See [Connection files](/docs/forward/datafiles/connection-files) for more details on how to create a connection file and secrets management.
For a list of Kafka connection settings, see [Settings](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#connection-settings).
2
### Create a Kafka data source [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#create-a-kafka-data-source)
Create a .datasource file using `tb create --prompt` or manually.
The .datasource file must contain the desired schema and the required settings for Kafka, including the `KAFKA_CONNECTION_NAME` setting, which must match the name of the .connection file you created in the previous step.
For example:
##### kafkasample.datasource
SCHEMA >
`value` String,
`topic` LowCardinality(String),
`partition` Int16,
`offset` Int64,
`timestamp` DateTime,
`key` String
ENGINE "MergeTree"
ENGINE_PARTITION_KEY "toYYYYMM(timestamp)"
ENGINE_SORTING_KEY "timestamp"
KAFKA_CONNECTION_NAME kafkasample # The name of the .connection file
KAFKA_TOPIC test_topic
KAFKA_GROUP_ID {{ tb_secret("KAFKA_GROUP_ID") }} For a list of Kafka data source settings, see [Settings](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#datasource-settings).
Use different consumer groups for different environments, so consumers and their committed offset are isolated.
3
### Connectivity check [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#connectivity-check)
After you've defined your Kafka data source and connection, you can test it by running a deploy check:
tb --cloud deploy --check This will run the connection and check if the connection is valid. To see the connection details, run `tb --cloud connection ls`.
You might need to create the secrets in your environment for the connectivity check to work. For example:
tb --cloud secret set KAFKA_KEY "UQA5EVC11VWEN6SA"
## .datasource settings [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#datasource-settings)
The Kafka connector use the following settings in .datasource files:
| Instruction | Required | Description |
| --- | --- | --- |
| `KAFKA_CONNECTION_NAME` | Yes | The name of the configured Kafka connection in Tinybird. |
| `KAFKA_TOPIC` | Yes | Name of the Kafka topic to consume from. |
| `KAFKA_GROUP_ID` | Yes | Consumer Group ID to use when consuming from Kafka. |
| `KAFKA_AUTO_OFFSET_RESET` | No | Offset to use when no previous offset can be found, for example when creating a new consumer. Supported values are `latest`  , `earliest`   . Default: `latest`  . |
| `KAFKA_STORE_HEADERS` | No | Store Kafka headers as field `__headers`   for later processing. Default value is `'False'`  . |
| `KAFKA_STORE_BINARY_HEADERS` | No | Stores all Kafka headers as binary data in field `__headers`   as a binary map of type `Map(String, String)`   . To access the header `'key'`   run: `__headers['key']`   . Default value is `'True'`   . This field only applies if `KAFKA_STORE_HEADERS`   is set to `True`  . |
| `KAFKA_STORE_RAW_VALUE` | No | Stores the raw message in its entirety as an additional column. Supported values are `'True'`  , `'False'`   . Default: `'False'`  . |
| `KAFKA_SCHEMA_REGISTRY_URL` | No | URL of the Kafka schema registry. |
| `KAFKA_TARGET_PARTITIONS` | No | Target partitions to place the messages. |
| `KAFKA_KEY_FORMAT` | No | Format of the message value. Valid values are `avro`  , `json_with_schema`   , and `json_without_schema`   . Using `avro`   or `json_with_schema`   requires `KAFKA_SCHEMA_REGISTRY_URL`   to be set. |
| `KAFKA_VALUE_FORMAT` | No | Format of the message value. Valid values are `avro`  , `json_with_schema`   , and `json_without_schema`   . Using `avro`   or `json_with_schema`   requires `KAFKA_SCHEMA_REGISTRY_URL`   to be set. |
| `KAFKA_KEY_AVRO_DESERIALIZATION` | No | If the key of the message is serialized in avro format, allow decoding it using the Avro definition stored in `KAFKA_SCHEMA_REGISTRY_URL`   . The key is converted to JSON and stored in the `__key`   column. Defaults to `'False'`   . A deprecated option is to use the `KAFKA_KEY_FORMAT`   parameter with the `avro`   value. |
## .connection settings [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#connection-settings)
The Kafka connector use the following settings in .connection files:
| Instruction | Required | Description |
| --- | --- | --- |
| `KAFKA_BOOTSTRAP_SERVERS` | Yes | Comma-separated list of one or more Kafka brokers, including Port numbers. |
| `KAFKA_KEY` | Yes | Key used to authenticate with Kafka. Sometimes called Key, Client Key, or Username, depending on the Kafka distribution. |
| `KAFKA_SECRET` | Yes | Secret used to authenticate with Kafka. Sometimes called Secret, Secret Key, or Password, depending on the Kafka distribution. |
| `KAFKA_SECURITY_PROTOCOL` | No | Security protocol for the connection. Accepted values are `plaintext`   and `SASL_SSL`   . Default value is `SASL_SSL`  . |
| `KAFKA_SASL_MECHANISM` | No | SASL mechanism to use for authentication. Supported values are `'PLAIN'`  , `'SCRAM-SHA-256'`  , `'SCRAM-SHA-512'`   . Default value is `'PLAIN'`  . |
## Kafka connector in the local environment [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#kafka-connector-in-the-local-environment)
When using the Kafka connector in the local environment, which runs in a Docker container, you can consume messages from a local Kafka server or a Kafka server in the cloud.
### Local Kafka server [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#local-kafka-server)
When using a local Kafka server, make sure that the Tinybird Local container can access your local Kafka server. If you are running Kafka using Docker, you can use the following command to connect your local Kafka server to the Tinybird Local container:
docker network connect local-kafka-network tinybird-local After this is done, create the required secrets in your local environment. For example:
tb --local secret set KAFKA_KEY "kafka-local-username" You can also use the `tb_secret()` default value. For example:
##### kafkasample.connection
KAFKA_KEY {{ tb_secret("KAFKA_KEY", "kafka-local-username") }}
### Kafka server in the cloud [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#kafka-server-in-the-cloud)
When using a Kafka server in the cloud that's visible on your network, you can create the required secrets in your local environment. For example:
tb --local secret set KAFKA_KEY "kafka-cloud-username" Don't use the `tb_secret()` default value in this case, as it might expose credentials in your code.
## Columns of the data source [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#columns-of-the-data-source)
When you connect a Kafka producer to Tinybird, Tinybird consumes optional metadata columns from that Kafka record and writes them to the data source.
The following fields represent the raw data received from Kafka:
- `__value`   : A String representing the entire unparsed Kafka record inserted.
- `__topic`   : The Kafka topic that the message belongs to.
- `__partition`   : The kafka partition that the message belongs to.
- `__offset`   : The Kafka offset of the message.
- `__timestamp`   : The timestamp stored in the Kafka message received by Tinybird.
- `__key`   : The key of the kafka message.
- `__headers`   : Headers parsed from the incoming topic messages. See[  Using custom Kafka headers for advanced message processing](https://www.tinybird.co/blog-posts/using-custom-kafka-headers)  .
Metadata fields are optional. Omit the fields you don't need to reduce your data storage.
## Kafka logs [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#kafka-logs)
You can find global logs in the `datasources_ops_log` [Service Data Source](/docs/monitoring/service-datasources#tinybird-datasources-ops-log) . Filter by `datasource_id` to select the correct datasource, and set `event_type` to `append-kafka`.
To select all Kafka releated logs in the last day, run the following query:
SELECT *
FROM tinybird.datasources_ops_log
WHERE datasource_id = 't_1234'
AND event_type = 'append-kafka'
AND timestamp > now() - INTERVAL 1 day
ORDER BY timestamp DESC If you can't find logs in `datasources_ops_log` , the `kafka_ops_log` [Service Data Source](/docs/monitoring/service-datasources#tinybird-kafka-ops-log) contains more detailed logs. Filter by `datasource_id` to select the correct datasource, and use `msg_type` to select the desired log level ( `info`, `warning` , or `error` ).
SELECT *
FROM tinybird.kafka_ops_log
WHERE datasource_id = 't_1234'
AND timestamp > now() - interval 1 day
AND msg_type IN ['info', 'warning', 'error']
## Limits [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#limits)
The limits for the Kafka connector are:
- Minimum flush time: 4 seconds
- Throughput (uncompressed): 20MB/s
- Up to 3 connections per Workspace
If you're regularly hitting these limits, contact [support@tinybird.co](mailto:support@tinybird.co) for support.
## Troubleshooting [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#troubleshooting)
When Kafka commits a message for a topic and a group ID, it always sends data from the latest committed offset. In Tinybird, each Kafka data source receives data from a topic and uses a group ID. The combination of `topic` and `group id` must be unique.
If you remove a Kafka data source and you recreate it again with the same settings after having received data, you only get data from the latest committed offset, even if `KAFKA_AUTO_OFFSET_RESET` is set to `earliest`.
To solve this issue, try the following:
- Always use a different group ID when testing Kafka data sources.
- Check in the `tinybird.datasources_ops_log`[  Service Data Source](/docs/monitoring/service-datasources)   to see global errors.
- Check in the `tinybird.kafka_ops_log`[  Service Data Source](/docs/monitoring/service-datasources)   to see if you've already used a group id to ingest data from a topic.
### Compressed messages [¶](https://www.tinybird.co/docs/forward/get-data-in/connectors/kafka#compressed-messages)
Tinybird can consume from Kafka topics where Kafka compression is enabled, as decompressing the message is a standard function of the Kafka consumer. If you compressed the message before passing it through the Kafka producer, Tinybird can't do post-consumer processing to decompress the message.
For example, if you compressed a JSON message through gzip and produced it to a Kafka topic as a `bytes` message, it would be ingested by Tinybird as `bytes` . If you produced a JSON message to a Kafka topic with the Kafka producer setting `compression.type=gzip` , while it would be stored in Kafka as compressed bytes, it would be decoded on ingestion and arrive to Tinybird as JSON.
---